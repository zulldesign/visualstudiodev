@{
	ViewBag.Title = "Blog";
}
<h2>Bagaimana Untuk Membuat Blog Mudah Part1</h2>
<p id="demo"></p>

<button onclick="clearInterval(myVar)">Stop time</button>

<script>
var myVar = setInterval(function(){myTimer()},1000);
function myTimer() {
	var d = new Date();
	document.getElementById("demo").innerHTML = d.toLocaleTimeString();
}
</script>
@using (Html.BeginForm("ValidateCommand", "PayPal"))
{
	<div>
		<table >
			<tr>
				<td>
					Nama Produk:
				</td>
				<td>
					<input type="text" name="product" value="YURAN BAYARAN BULAN OKTOBER" readonly />
				</td>
			</tr>
			<tr>
				<td>
				   Jumlah Harga:
				</td>
				<td>
					RM <input type="text" name="totalPrice" value="19.90" readonly />
				</td>
			</tr>
			<tr>
				<td>
				</td>
				<td>
					<input type="submit" name="btnConfirm" value="Check Out with Paypal" />
				</td>
			</tr>
		</table>
	</div>
}
<h2 id="intro">1. Pengenalan</h2>

<p>
  Terdapat cara yang berbeza kita boleh belajar teknologi; dengan membaca buku, menghadiri persidangan oleh, dengan melakukan sampel dan banyak lagi. Saya rasa salah satu cara terbaik adalah dengan mewujudkan sesuatu yang berguna untuk kita menggunakan teknologi. Salah satu perkara yang berguna yang anda boleh mewujudkan mudah adalah blog. Dalam siri berbilang bahagian, kita akan belajar langkah ASP.NET MVC demi langkah dengan mewujudkan satu blog dari awal.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_blog_look.png" title="JustBlog">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_blog_look.png" class="post-diagram" alt="JustBlog">
  </a>
  <p class="post-img-caption">JustBlog</p>
</div>

<p>
  Untuk menjaga perkara-perkara yang mudah kita tidak akan membina sistem mengulas sebaliknya kita akan menggunakan Disqus. Saya menggalakkan anda untuk membina sistem mengulas oleh anda dan yang akan menjadi latihan yang baik untuk anda.
</p>

<p>
  Kami akan menggunakan <span class="span-highlight-text">ASP.NET MVC 4</span> untuk membangunkan aplikasi. Saya tidak pandai Rangka Kerja Entiti dan kami akan menggunakan Fasih NHibernate / NHibernate kombo untuk membina sistem data akses. Anda boleh menggunakan Rangka Kerja Entiti jika anda suka. Akhir sekali, kami akan menggunakan Ninject untuk suntikan pergantungan kerana ia kesederhanaan.
</p>

<p>
  Dalam bahagian pertama siri ini kita akan membina infrastruktur asas blog. Kami akan mewujudkan kelas-kelas model perlu, komponen akses data, pengawal dan pandangan. Pada akhir bahagian ini kita mempunyai blog kerja di mana kita boleh melihat siaran terbaru, membaca pos yang lengkap, melayari jawatan berdasarkan kategori atau tag dan juga mencari jawatan yang berminat.
</p>

<p>
  Dalam bahagian kedua, kita akan membina sebuah konsol admin untuk menguruskan posting kami, tag dan kategori.
</p>

<p>
  Dalam bahagian akhir kita akan mengintegrasikan Disqus sistem mengulas dengan blog kita. Kami juga menyaksikan kira-kira mengintegrasikan AddThis, FeedBurner untuk berkongsi dan langganan. Akhir sekali, kami juga mengambil ukuran yang diperlukan untuk SEO.
</p>
<h2 id="tech">2. Technologies</h2>

<div style="font-style: italic;">
  <p>→ ASP.NET MVC 4.0</p>
  <p>→ Fluent NHibernate and NHibernate</p>
  <p>→ SQL Server 2012</p>
  <p>→ Ninject</p>
  <p>→ jQuery</p>
</div>

<h2 id="part1">3. Bahagian I - Buat infrastruktur asas. Membuat kelas-kelas model perlu, komponen akses data, pengawal dan pandangan.</h2>

<p>
  Mari kita lihat kisah-kisah pengguna yang kita akan menyelesaikan dalam bahagian ini.
</p>

<h3 id="user-stories">3.1 Pengguna Cerita</h3>

<p><i>Cerita #1</i> - Paparkan posting blog terkini</p>
<p><i>Cerita #2</i> - Paparkan topik berdasarkan kategori</p>
<p><i>Cerita #3</i> - Paparkan topik berdasarkan tag</p>
<p><i>Cerita #4</i> - Cari jawatan</p>
<p><i>Cerita #5</i> - Paparkan butir-butir jawatan tunggal</p>
<p><i>Cerita #6</i> - Paparkan kategori jawatan dalam widget</p>
<p><i>Cerita #7</i> - Paparkan tag jawatan dalam widget</p>
<p><i>Cerita #8</i> - Paparkan mesej terkini dalam widget</p>

<h2 id="story1">4. Cerita #1 - Paparkan posting blog terkini</h2>

<p>
  Apa yang kita akan mencapai dalam cerita ini adalah untuk membaca posting blog dari pangkalan data dan memaparkan mereka dalam pandangan.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_firstdrive.png">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_firstdrive.png" class="post-diagram">
  </a>
</div>

<p>
  Before implementing the story we have to make up the basic setup ready. We have to create the solution and necessary projects.
</p>

<p>
  Create an empty solution with the name <span class="span-highlight-text">JustBlog</span>.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_createsolution.png" title="Create empty solution">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_createsolution.png" class="post-diagram" alt="Create empty solution">
  </a>
  <p class="post-img-caption">Create empty solution</p>
</div>

<p>
  Create a MVC 4 web application with the same name as the solution i.e. <span class="span-highlight-text">JustBlog</span>. In the "Select a template" window select "Empty template".
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_createmvcproject.png" title="Create MVC 4 application">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_createmvcproject.png" class="post-diagram" alt="Create MVC 4 application">
  </a>
  <p class="post-img-caption">Create MVC 4 application</p>
</div>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_selectmvctemplate.png" title="Select Empty Template">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_selectmvctemplate.png" class="post-diagram" alt="Select Empty Template">
  </a>
  <p class="post-img-caption">Select Empty Template</p>
</div>

<p>
  Create a class library and name it as <span class="span-highlight-text">JustBlog.Core</span>. It's a best practice to keep the domain classes and the data-access components in a separate project and that would helps us manage the application easier in terms of development, testing and deployment. Don't forget to add reference to <span class="span-highlight-text">JustBlog.Core</span> in <span class="span-highlight-text">JustBlog</span>.
</p>

<p>
  Our basic setup is ready. The solution will looks like below after adding the necessary projects.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_solutionexplore.png" title="Solution Explorer">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_solutionexplore.png" class="post-diagram" alt="Solution Explorer">
  </a>
  <p class="post-img-caption">Solution Explorer</p>
</div>

<p>
  This is a little bigger user story. We are going to do the initial data-access and DI (Dependency Injection) configuration work as part of this story.
</p>

<p>
  Let's break our user story into smaller tasks and that helps us to implement it easily.
</p>

<p>
  1. Create domain classes
  <br>
  2. Configure <span class="span-highlight-text">Fluent NHibernate</span> and <span class="span-highlight-text">NHibernate</span>
  <br>
  3. Create mapping classes, data access classes and methods
  <br>
  4. Configure <span class="span-highlight-text">Ninject</span> for core project
  <br>
  5. Configure <span class="span-highlight-text">Ninject</span> for MVC
  <br>
  6. Create controller and actions
  <br>
  7. Create view
</p>

<h3 id="story1-create-domain-classes">4.1 Create domain classes</h3>

<p>
  Create a new folder called <span class="span-highlight-text">Objects</span> in the <span class="span-highlight-text">JustBlog.Core</span> project to place the domain classes. We need to create three domain classes for our blog: <span class="span-highlight-text">Post</span>, <span class="span-highlight-text">Category</span> and <span class="span-highlight-text">Tag</span>. Each <span class="span-highlight-text">Post</span> belongs to a single <span class="span-highlight-text">Category</span> and it can be labelled with many <span class="span-highlight-text">Tags</span>. Between <span class="span-highlight-text">Post</span> and <span class="span-highlight-text">Category</span> the relationship is many-to-one and between <span class="span-highlight-text">Post</span> and <span class="span-highlight-text">Tag</span> the relationship is many-to-many.
</p>

<p>
  The relationship between the classes is illustrated by the below diagram.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/justblog_db_dia.jpg" title="Class Diagram">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/justblog_db_dia.jpg" class="post-diagram" alt="Class Diagram">
  </a>
  <p class="post-img-caption">Class Diagram</p>
</div>

<p>
  Here is our <span class="span-highlight-text">Post</span> class.
</p>

<div><div id="highlighter_83357" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Core.Objects</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">Post</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">int</code> <code class="csharp plain">Id</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">Title</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">ShortDescription</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">Description</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">Meta</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">UrlSlug</code></div><div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">bool</code> <code class="csharp plain">Published</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp plain">DateTime PostedOn</code></div><div class="line number27 index26 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp plain">DateTime? Modified</code></div><div class="line number30 index29 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp plain">Category Category</code></div><div class="line number33 index32 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp plain">IList&lt;Tag&gt; Tags</code></div><div class="line number36 index35 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number37 index36 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number38 index37 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 1. Post model
  
