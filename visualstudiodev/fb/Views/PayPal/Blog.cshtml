@{
	ViewBag.Title = "Blog";
}
<h2>Bagaimana Untuk Membuat Blog Mudah Part1</h2>
<p id="demo"></p>

<button onclick="clearInterval(myVar)">Stop time</button>

<script>
var myVar = setInterval(function(){myTimer()},1000);
function myTimer() {
	var d = new Date();
	document.getElementById("demo").innerHTML = d.toLocaleTimeString();
}
</script>
@using (Html.BeginForm("ValidateCommand", "PayPal"))
{
	<div>
		<table >
			<tr>
				<td>
					Nama Produk:
				</td>
				<td>
					<input type="text" name="product" value="YURAN BAYARAN BULAN OKTOBER" readonly />
				</td>
			</tr>
			<tr>
				<td>
				   Jumlah Harga:
				</td>
				<td>
					RM <input type="text" name="totalPrice" value="19.90" readonly />
				</td>
			</tr>
			<tr>
				<td>
				</td>
				<td>
					<input type="submit" name="btnConfirm" value="Check Out with Paypal" />
				</td>
			</tr>
		</table>
	</div>
}
<!DOCTYPE html>
<!-- saved from url=(0081)http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1 -->
<html class=" js no-touch csstransitions"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><div class="fit-vids-style">­<style>               .fluid-width-video-wrapper {                 width: 100%;                              position: relative;                       padding: 0;                            }                                                                                   .fluid-width-video-wrapper iframe,        .fluid-width-video-wrapper object,        .fluid-width-video-wrapper embed {           position: absolute;                       top: 0;                                   left: 0;                                  width: 100%;                              height: 100%;                          }                                       </style></div><script type="text/javascript" src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/layers079.js"></script>
  <title>How to create a simple blog using ASP.NET MVC - Part I</title>

  
  <meta content="True" name="HandheldFriendly">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
  <meta name="viewport" content="width=device-width">
  <meta name="description" content="There are different ways we can learn a technology, by reading books, by attending conferences, by doing samples and more. I think one of the best way is by creating something useful out of it. One of the useful thing that could be easily created is a blog. In this multi-part series, we are going to learn ASP.NET MVC step by step by creating a blog from scratch.">
  <meta name="keywords" content="ASP.NET MVC, asp.net-mvc4">
  <meta name="author" content="Vijaya Anand">
  <meta name="robots" content="index,follow">
  <meta name="rating" content="SAFE FOR KIDS">

  <link rel="shortcut icon" href="http://www.prideparrot.com/Content/themes/read/images/ico/favicon.ico">
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="http://www.prideparrot.com/Content/themes/read/images/ico/logo-144.png">
  <link rel="apple-touch-icon-precomposed" sizes="114x114" href="http://www.prideparrot.com/Content/themes/read/images/ico/logo-114.png">
  <link rel="apple-touch-icon-precomposed" sizes="72x72" href="http://www.prideparrot.com/Content/themes/read/images/ico/logo-72.png">
  <link rel="apple-touch-icon-precomposed" href="http://www.prideparrot.com/Content/themes/read/images/ico/logo-57.png">

  <!-- FONTS -->
  <link href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/css" rel="stylesheet" type="text/css">
  <link href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/css(1)" rel="stylesheet" type="text/css">
  <link href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/css(2)" rel="stylesheet" type="text/css">

  <!--[if lte IE 9]>
		<script src="/Content/themes/read/js/html5shiv.js"></script>
		<script src="j/Content/themes/read/s/selectivizr-min.js"></script>
	<![endif]-->

  <!-- STYLES -->
  <link rel="stylesheet" type="text/css" media="print" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/print.css">
  <link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/grid.css">
  <link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/style.css">
  <link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/normalize.css">
  <link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/font-awesome.css">
  <link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/prettify.css">
  <link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/uniform.default.css">
  <link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/main.css">
  <link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/flexslider.css">
  <link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/themefixes.css">
  <link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/mediaelementplayer.css">
  <link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/shCoreDefault.css">

<script type="text/javascript" async="" src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/ga.js"></script><script type="text/javascript" src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/embed.js"></script><script async="" type="text/javascript" src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/count.js"></script><script async="" type="text/javascript" src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/count.js"></script><link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/widget006.old.css" media="all"><script async="" src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/count-data.js"></script><script src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/alfie.f51946af45e0b561c60f768335c9eb79.js" async="" charset="UTF-8"></script><link rel="stylesheet" type="text/css" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/layers063.css" media="all"></head>

<body><div class="search-mobile">
			  <form role="search" method="get" id="search-form-mobile" action="http://www.prideparrot.com/blog/search">
				
				<input type="text" value="" name="search" id="search-mobile-input" title="Enter keyword" maxlength="100" placeholder="Search">
				<input type="submit" id="search-mobile-submit" title="Search it" value="→">
			  </form>
			</div>

  <div id="page" class="hfeed site">

	<header class="site-header wrapper" role="banner">
	  <div class="row">

		<hgroup>
		  <h1 class="site-title"><a href="http://www.prideparrot.com/blog" title="PrideParrot" rel="home">Pride<span class="theme-color">Parrot</span></a></h1>
		  <h2 class="site-description">. . . being pragmatic</h2>
		</hgroup>

		<nav id="site-navigation" class="main-navigation" role="navigation"><div class="selector" style="width: 98px;"><span style="width: 73px;">MENU</span><select class="menu" style="opacity: 0; left: 2px; width: 271.840000152588px;"><option value="null">MENU</option><option value="/blog"> Home</option><option value="/downloads"> Downloads</option><option value="/aboutme"> About</option><option value="/contact"> Contact</option><option value="http://feeds.feedburner.com/prideparrot"> Subscribe</option><option value="search"> Search</option></select></div>
		  <ul>
			<li class="current-menu-item"><a href="http://www.prideparrot.com/blog">Home</a></li>
			<li class=""><a href="http://www.prideparrot.com/downloads">Downloads</a></li>
			<li class=""><a href="http://www.prideparrot.com/aboutme">About</a></li>
			<li class=""><a href="http://www.prideparrot.com/contact">Contact</a></li>
			<li><a href="http://feeds.feedburner.com/prideparrot" target="_blank" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a></li>
			<li>
			  <form role="search" method="get" id="search-form" action="http://www.prideparrot.com/blog/search">
				<label class="screen-reader-text" for="search">Search</label>
				<input type="text" value="" name="search" id="search" title="Enter keyword" maxlength="100">
				<input type="submit" id="search-submit" title="Search it" value="→">
			  </form>
			</li>
		  </ul>
		</nav>
	  </div>
	</header>

	<div class="page-content-wrapper">
	  
<section id="main" class="middle wrapper">
  <div class="row row-fluid">
	<div id="primary" class="site-content">
	  <div id="content" role="main">
		<div class="blog-single readable-content">

			<article class="post type-post format-standard hentry">

			  <header class="entry-header">
				<h1><a href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/How to create a simple blog using ASP.NET MVC - Part I.htm" title="How to create a simple blog using ASP.NET MVC - Part I" rel="bookmark">How to create a simple blog using ASP.NET MVC - Part I</a></h1>
			  </header>

			  <div class="entry-meta">
				posted in 
				  <a href="http://www.prideparrot.com/blog/tag/ASP.NET%20MVC" title="View all posts in ASP.NET MVC">ASP.NET MVC</a>	,                  <a href="http://www.prideparrot.com/blog/tag/asp.net-mvc4" title="View all posts in asp.net-mvc4">asp.net-mvc4</a>	                on <a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#" rel="bookmark">December 09, 2012</a>
				<span class="comments-link">
				  <a href="http://prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#disqus_thread">158 Comments</a>
				</span>
			  </div>

			  <div class="addthis_sharing_toolbox text-center" data-url="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1" data-title="How to create a simple blog using ASP.NET MVC - Part I"><div id="atstbx" class="at-share-tbx-element addthis_32x32_style addthis-smartlayers animated at4-show"><a class="at-share-btn at-svc-facebook"><span class="at300bs at15nc at15t_facebook" title="Facebook"></span></a><a class="at-share-btn at-svc-twitter"><span class="at300bs at15nc at15t_twitter" title="Twitter"></span></a><a class="at-share-btn at-svc-email"><span class="at300bs at15nc at15t_email" title="Email"></span></a><a class="at-share-btn at-svc-print"><span class="at300bs at15nc at15t_print" title="Print"></span></a><a class="at-share-btn at-svc-gmail"><span class="at300bs at15nc at15t_gmail" title="Gmail"></span></a><a class="at-share-btn at-svc-stumbleupon"><span class="at300bs at15nc at15t_stumbleupon" title="StumbleUpon"></span></a><a class="at-share-btn at-svc-favorites"><span class="at300bs at15nc at15t_favorites" title="Favorites"></span></a><a class="at-share-btn at-svc-tumblr"><span class="at300bs at15nc at15t_tumblr" title="Tumblr"></span></a><a class="at-share-btn at-svc-pinterest_share"><span class="at300bs at15nc at15t_pinterest_share" title="Pinterest"></span></a><a class="at-share-btn at-svc-compact"><span class="at300bs at15nc at15t_compact" title="More"></span></a></div></div>

			  <div class="entry-content">
<div class="toc">

  <h2>Table of Contents</h2>

  <div id="table_of_contents">
	<ul>
	  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#intro" data-page="1">1. Introduction</a></li>
	  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#tech" data-page="1">2. Technologies</a></li>
	  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#part1" data-page="1">3. Part I - Create the basic infrastructure. Create the necessary model classes, data access components, controllers and views.</a>
		<ul>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#user-stories" data-page="1">3.1 User Stories</a></li>
		</ul>
	  </li>
	  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1" data-page="1">4. Story #1 - Display the latest blog posts</a>
		<ul>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1-create-domain-classes" data-page="1">4.1 Create domain classes</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1-configure-nhibernate" data-page="2">4.2 Configure Fluent NHibernate and NHibernate</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1-create-data-classes" data-page="2">4.3 Create data access classes and methods</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1-configure-ninject" data-page="3">4.4 Configure Ninject for JustBlog.Core project</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1-configure-ninject-mvc" data-page="3">4.5 Configure Ninject for MVC project</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1-create-controller-actions" data-page="4">4.6 Create controller and actions</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1-create-view" data-page="5">4.7 Create view</a>
			<ul>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1-setting-theme-layout" data-page="5">4.7.1 Setting up the theme and layout</a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1-fixing-anchor-links" data-page="5">4.7.2 Fixing anchor links</a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1-list-view" data-page="5">4.7.3 List view</a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1-pagination" data-page="7">4.7.4 Pagination</a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story1-fixing-routes" data-page="7">4.7.5 Fixing Routes</a></li>
			</ul>
		  </li>
		</ul>
	  </li>
	  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story2" data-page="8">5. Story #2 - Display posts based on category</a>
		<ul>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story2-create-repo-methods" data-page="8">5.1 Create repository methods to fetch posts, total posts and category based on slug</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story2-create-action" data-page="8">5.2 Create an action to return posts belongs a particular category</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story2-create-routeconfig" data-page="8">5.3 Define a new route in RouteConfig.cs file</a></li>
		</ul>
	  </li>
	  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story3" data-page="9">6. Story #3 - Display posts based on tag</a>
		<ul>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story3-create-repo-methods" data-page="9">6.1 Create repository methods to fetch posts, total posts and tag based on slug</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story3-create-action" data-page="9">6.2 Create an action to return posts for a particular tag</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story3-create-new-route" data-page="9">6.3 Define a new route in RouteConfig.cs file</a></li>
		</ul>
	  </li>
	  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story4" data-page="10">7. Story #4 - Search posts</a>
		<ul>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story4-create-partial-view" data-page="10">7.1 Create a partial view to display the search textbox</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story4-create-repo-methods" data-page="10">7.2 Create necessary repository methods</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story4-create-action" data-page="10">7.3 Create search action</a></li>
		</ul>
	  </li>
	  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story5" data-page="11">8. Story #5 - Display the details of a single post</a>
		<ul>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story5-create-repo-methods" data-page="11">8.1 Create a repository method to return post based upon year, month and url-slug</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story5-create-action" data-page="11">8.2 Create an action to return the post view</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story5-create-view" data-page="11">8.3 Create view</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story5-create-route" data-page="11">8.4 Define a new route in RouteConfig.cs</a></li>
		</ul>
	  </li>
	  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story6" data-page="12">9. Story #6 - Display the post categories in a widget</a>
		<ul>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story6-create-repo-methods" data-page="12">9.1 Create a repository method that returns all the categories</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story6-create-view-model" data-page="12">9.2 Create a view model</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story6-create-child-action" data-page="12">9.3 Create a child action</a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story6-create-partial-view" data-page="12">9.4 Create necessary partial views</a></li>
		</ul>
	  </li>
	  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story7" data-page="13">10. Story #7 - Display the post tags in a widget</a>
		<ul>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story7-create-repo-methods" data-page="13">10.1 Create a repository method that returns all the tags </a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story7-create-view-model" data-page="13">10.2 Update the WidgetViewModel </a></li>
		  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story7-create-partial-view" data-page="13">10.3 Create a partial view to display the tags </a></li>
		</ul>
	  </li>
	  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#story8" data-page="14">11. Story #8 - Display the latest posts in a widget</a></li>
	  <li><a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1#summary" data-page="14">12. Summary</a></li>
	</ul>
  </div>
</div>

<h2 id="intro">1. Introduction</h2>

<p>
  There are different ways we can learn a technology; by reading books, by attending conferences, by doing samples and more. I think one of the best way is by creating something useful for us using the technology. One of the useful thing that you could create easily is a blog. In this multi-part series, we are going to learn <span class="span-highlight-text">ASP.NET MVC</span> step by step by creating a blog from scratch.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_blog_look.png" title="JustBlog">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_blog_look.png" class="post-diagram" alt="JustBlog">
  </a>
  <p class="post-img-caption">JustBlog</p>
</div>

<p>
  To keep things simple we are not going to build the commenting system instead we are going to use <span class="span-highlight-text">Disqus</span>. I encourage you to build the commenting system by yourself and that would be a good exercise for you.
</p>

<p>
  We are going to use <span class="span-highlight-text">ASP.NET MVC 4</span> to develop the application. I'm not good at <span class="span-highlight-text">Entity Framework</span> and we are going to use <span class="span-highlight-text">Fluent NHibernate/NHibernate</span> combo to build the data-access system. You could use <span class="span-highlight-text">Entity Framework</span> if you like. Finally, we are going to use <span class="span-highlight-text">Ninject</span> for dependency injection because of it's simplicity.
</p>

<p>
  In the first part of the series we are going to build the basic infrastructure of the blog. We are going to create the necessary model classes, data access components, controllers and views. At the end of this part we have a working blog where we can see the latest posts, read a complete post, browse posts based upon a category or tag and even search for interested posts.
</p>

<p>
  In the second part, we are going to build an admin console to manage our posts, tags and categories.
</p>

<p>
  In the final part we are going to integrate <span class="span-highlight-text">Disqus</span> commenting system with our blog. We also see about integrating <span class="span-highlight-text">AddThis</span>, <span class="span-highlight-text">FeedBurner</span> for sharing and subscriptions. Last but not least, we also take necessary measurements for SEO. 
</p>

<h2 id="tech">2. Technologies</h2>

<div style="font-style: italic;">
  <p>→ ASP.NET MVC 4.0</p>
  <p>→ Fluent NHibernate and NHibernate</p>
  <p>→ SQL Server 2012</p>
  <p>→ Ninject</p>
  <p>→ jQuery</p>
</div>

<h2 id="part1">3. Part I - Create the basic infrastructure. Create the necessary model classes, data access components, controllers and views.</h2>

<p>
  Let's see the user stories that we are going to complete in this part.
</p>

<h3 id="user-stories">3.1 User Stories</h3>

<p><i>Story #1</i> - Display the latest blog posts</p>
<p><i>Story #2</i> - Display posts based on category</p>
<p><i>Story #3</i> - Display posts based on tag</p>
<p><i>Story #4</i> - Search posts</p>
<p><i>Story #5</i> - Display the details of a single post</p>
<p><i>Story #6</i> - Display the post categories in a widget</p>
<p><i>Story #7</i> - Display the post tags in a widget</p>
<p><i>Story #8</i> - Display the latest posts in a widget</p>

<h2 id="story1">4. Story #1 - Display the latest blog posts</h2>

<p>
  What we are going to accomplish in this story is to read the blog posts from database and display them in a view.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_firstdrive.png">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_firstdrive.png" class="post-diagram">
  </a>
</div>

<p>
  Before implementing the story we have to make up the basic setup ready. We have to create the solution and necessary projects.
</p>

<p>
  Create an empty solution with the name <span class="span-highlight-text">JustBlog</span>.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_createsolution.png" title="Create empty solution">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_createsolution.png" class="post-diagram" alt="Create empty solution">
  </a>
  <p class="post-img-caption">Create empty solution</p>
</div>

<p>
  Create a MVC 4 web application with the same name as the solution i.e. <span class="span-highlight-text">JustBlog</span>. In the "Select a template" window select "Empty template".
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_createmvcproject.png" title="Create MVC 4 application">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_createmvcproject.png" class="post-diagram" alt="Create MVC 4 application">
  </a>
  <p class="post-img-caption">Create MVC 4 application</p>
</div>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_selectmvctemplate.png" title="Select Empty Template">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_selectmvctemplate.png" class="post-diagram" alt="Select Empty Template">
  </a>
  <p class="post-img-caption">Select Empty Template</p>
</div>

<p>
  Create a class library and name it as <span class="span-highlight-text">JustBlog.Core</span>. It's a best practice to keep the domain classes and the data-access components in a separate project and that would helps us manage the application easier in terms of development, testing and deployment. Don't forget to add reference to <span class="span-highlight-text">JustBlog.Core</span> in <span class="span-highlight-text">JustBlog</span>.
</p>

<p>
  Our basic setup is ready. The solution will looks like below after adding the necessary projects.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_solutionexplore.png" title="Solution Explorer">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_solutionexplore.png" class="post-diagram" alt="Solution Explorer">
  </a>
  <p class="post-img-caption">Solution Explorer</p>
</div>

<p>
  This is a little bigger user story. We are going to do the initial data-access and DI (Dependency Injection) configuration work as part of this story.
</p>

<p>
  Let's break our user story into smaller tasks and that helps us to implement it easily.
</p>

<p>
  1. Create domain classes
  <br>
  2. Configure <span class="span-highlight-text">Fluent NHibernate</span> and <span class="span-highlight-text">NHibernate</span>
  <br>
  3. Create mapping classes, data access classes and methods
  <br>
  4. Configure <span class="span-highlight-text">Ninject</span> for core project
  <br>
  5. Configure <span class="span-highlight-text">Ninject</span> for MVC
  <br>
  6. Create controller and actions
  <br>
  7. Create view
</p>

<h3 id="story1-create-domain-classes">4.1 Create domain classes</h3>

<p>
  Create a new folder called <span class="span-highlight-text">Objects</span> in the <span class="span-highlight-text">JustBlog.Core</span> project to place the domain classes. We need to create three domain classes for our blog: <span class="span-highlight-text">Post</span>, <span class="span-highlight-text">Category</span> and <span class="span-highlight-text">Tag</span>. Each <span class="span-highlight-text">Post</span> belongs to a single <span class="span-highlight-text">Category</span> and it can be labelled with many <span class="span-highlight-text">Tags</span>. Between <span class="span-highlight-text">Post</span> and <span class="span-highlight-text">Category</span> the relationship is many-to-one and between <span class="span-highlight-text">Post</span> and <span class="span-highlight-text">Tag</span> the relationship is many-to-many.
</p>

<p>
  The relationship between the classes is illustrated by the below diagram.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/justblog_db_dia.jpg" title="Class Diagram">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/justblog_db_dia.jpg" class="post-diagram" alt="Class Diagram">
  </a>
  <p class="post-img-caption">Class Diagram</p>
</div>

<p>
  Here is our <span class="span-highlight-text">Post</span> class.
</p>

<div><div id="highlighter_770583" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Core.Objects</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">Post</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">int</code> <code class="csharp plain">Id</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">Title</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">ShortDescription</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">Description</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">Meta</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">UrlSlug</code></div><div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">bool</code> <code class="csharp plain">Published</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp plain">DateTime PostedOn</code></div><div class="line number27 index26 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp plain">DateTime? Modified</code></div><div class="line number30 index29 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp plain">Category Category</code></div><div class="line number33 index32 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp plain">IList&lt;Tag&gt; Tags</code></div><div class="line number36 index35 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number37 index36 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number38 index37 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 1. Post model
</p>

<p>
  Most of the properties are self-explanatory. The <span class="span-highlight-text">UrlSlug</span> property is an alternate for the <span class="span-highlight-text">Title</span> property to use in address.
</p>

<p>
  For example, if we have a post with title "Advanced Linq in C#" published on August 2010, we are going to create the urls such that the post can be accessed by the address <span class="span-highlight-text">http://localhost/archive/2010/8/Advanced Linq in C#</span>. The post title may contain special characters (in this example there is a "#") and not all the servers can handle those requests having special characters. Instead of using the <span class="span-highlight-text">Title</span> property directly in the url we have to use some alternate text that resembles the post title and that is called as an <span class="span-highlight-text">URL Slug</span>.
</p>

<p>
  In above case, instead of using "Advanced Linq in C#" in url we are going to use an user-friendly text(slug) like "advanced_linq_in_csharp", therefore the address will be <span class="span-highlight-text">http://localhost/archive/2010/8/advanced_linq_in_csharp</span>. In <a class="external-ref-link" target="_blank" href="http://prideparrot.com/blog/archive/2013/3/how_to_create_simple_blog_part2">Part II</a>, we will see how to create slug automatically from the post title.
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">URL Slug</span>
	<p style="margin-top: 10px;">
	  A URL slug is a SEO- and user-friendly string-part in a URL to identify, describe and access a resource. Often the title of a page/article is a valid candidate.
	</p>
  </div>
</div>

<p>
  The <span class="span-highlight-text">Meta</span> property is used to store the metadata description for the post and it's used for SEO. An interesting thing to note down is all the properties are marked as <span class="span-highlight-text">virtual</span> and it's quite important as well. <span class="span-highlight-text">NHibernate</span> creates a runtime proxy for this class and for that all the properties needs to be <span class="span-highlight-text">virtual</span>.
</p>

<p>
  The <span class="span-highlight-text">Category</span> and <span class="span-highlight-text">Tag</span> classes are simple as shown below. We have used the <span class="span-highlight-text">UrlSlug</span> property for the same reason that we discussed above.
</p>

<div><div id="highlighter_645156" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Core.Objects</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">Category</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">int</code> <code class="csharp plain">Id </code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">Name </code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">UrlSlug</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }&nbsp;&nbsp; </code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">Description </code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp plain">IList&lt;Post&gt; Posts </code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number19 index18 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number20 index19 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 2. Category model
</p>

<div><div id="highlighter_887339" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Core.Objects</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">Tag</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">int</code> <code class="csharp plain">Id </code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">Name </code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">UrlSlug</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }&nbsp;&nbsp; </code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp keyword">string</code> <code class="csharp plain">Description </code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">virtual</code> <code class="csharp plain">IList&lt;Post&gt; Posts </code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number19 index18 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number20 index19 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 3. Tag model
</p>

<h3 id="story1-configure-nhibernate">4.2 Configure Fluent NHibernate and NHibernate</h3>

<p>
  We are going to use <span class="span-highlight-text">NHibernate</span> along with <span class="span-highlight-text">Fluent NHibernate</span> for database access. <span class="span-highlight-text">NHibernate</span> is an ORM tool much like <span class="span-highlight-text">Entity Framework</span> where the relationships between classes to tables are mapped through xml files. <span class="span-highlight-text">Fluent NHibernate</span> is an extension for <span class="span-highlight-text">NHibernate</span> which replaces xml files with classes. Mapping through classes is much easier than xml files.
</p>

<p>
  We can easily add references to <span class="span-highlight-text">NHibernate</span> and <span class="span-highlight-text">Fluent NHibernate</span> assemblies through the <span class="span-highlight-text">Nuget Package Manager Console</span>.
</p>

<p>
  Open up the <span class="span-highlight-text">Package Manager</span> from <span class="span-highlight-text">Tools</span> -&gt; <span class="span-highlight-text">Library Package Manager</span> -&gt; <span class="span-highlight-text">Package Manager Console</span>.
</p>

<p>Execute the following command from the console.</p>

<div style="font-weight: bold;">
  <p>
	PM&gt; Install-Package FluentNHibernate
  </p>
</div>

<p>
  Installing <span class="span-highlight-text">Fluent NHibernate</span> package will install the necessary assemblies. If the installation is successful we will see the following assemblies added to the <span class="span-highlight-text">References</span>. 
</p>

<p style="font-style: italic;">
  FluentNHibernate
  <br>
  NHibernate
  <br>
  Iesi.Collections
</p>

<h3 id="story1-create-data-classes">4.3 Create data access classes and methods</h3>

<p>
  Next thing we have to do is create the necessary mapping classes. A mapping class is used to map a class and it's properties to table and columns. Create a new folder called <span class="span-highlight-text">Mappings</span> in the <span class="span-highlight-text">JustBlog.Core</span> project to keep all the mapping classes.
</p>

<p>This is the mapping class for <span class="span-highlight-text">Post</span>.</p>

<div><div id="highlighter_344552" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">FluentNHibernate.Mapping;</code></div><div class="line number2 index1 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">JustBlog.Core.Objects;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Core.Mappings</code></div><div class="line number5 index4 alt2"><code class="csharp plain">{</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">PostMap: ClassMap&lt;Post&gt;</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">PostMap()</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Id(x =&gt; x.Id);</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.Title)</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Length(500)</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Not.Nullable();</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.ShortDescription)</code></div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Length(5000)</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Not.Nullable();</code></div><div class="line number19 index18 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.Description)</code></div><div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Length(5000)</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Not.Nullable();</code></div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.Meta)</code></div><div class="line number25 index24 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Length(1000)</code></div><div class="line number26 index25 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Not.Nullable();</code></div><div class="line number27 index26 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number28 index27 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.UrlSlug)</code></div><div class="line number29 index28 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Length(200)</code></div><div class="line number30 index29 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Not.Nullable();</code></div><div class="line number31 index30 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number32 index31 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.Published)</code></div><div class="line number33 index32 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Not.Nullable();</code></div><div class="line number34 index33 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number35 index34 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.PostedOn)</code></div><div class="line number36 index35 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Not.Nullable();</code></div><div class="line number37 index36 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number38 index37 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.Modified);</code></div><div class="line number39 index38 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number40 index39 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">References(x =&gt; x.Category)</code></div><div class="line number41 index40 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Column(</code><code class="csharp string">"Category"</code><code class="csharp plain">)</code></div><div class="line number42 index41 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Not.Nullable();</code></div><div class="line number43 index42 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number44 index43 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">HasManyToMany(x =&gt; x.Tags)</code></div><div class="line number45 index44 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Table(</code><code class="csharp string">"PostTagMap"</code><code class="csharp plain">);</code></div><div class="line number46 index45 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number47 index46 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number48 index47 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 4. PostMap class
</p>

<p>
  To create a mapping class we should inherit it from the <span class="span-highlight-text">Fluent NHibernate</span>'s generic class <span class="span-highlight-text">ClassMap</span>. All the mappings has to be done in the constructor.
</p>

<p>
  The <span class="span-highlight-text">Id</span> extension method is used to represent the property name that has to be set as the primary key column of the table. As default, <span class="span-highlight-text">Fluent NHibernate</span> assumes the table name as same as the class name and column name as same as the property name. If the table name is different then we should map the table with the class using the <span class="span-highlight-text">Table</span> extension method.
</p>

<p>Ex.</p>

<div><div id="highlighter_90008" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">Table(</code><code class="csharp string">"tbl_posts"</code><code class="csharp plain">);</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 5. Table extension method
</p>

<p>
  The <span class="span-highlight-text">Map</span> extension method is used to map a property with a table column. While mapping a property we can specify the size of the column, whether it's nullable or not and other details. If the generated column name has to be different from the property name then we should pass the column name using the <span class="span-highlight-text">Column</span> extension method.
</p>

<p>Ex.</p>

<div><div id="highlighter_599159" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">Map(x =&gt; x.Title).Column(</code><code class="csharp string">"post_title"</code><code class="csharp plain">)</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 6. Map extension method
</p>

<p>
  The <span class="span-highlight-text">References</span> method is used to represent the many-to-one relationship between <span class="span-highlight-text">Post</span> and <span class="span-highlight-text">Category</span> through a foreign key column <span class="span-highlight-text">Category</span> in the <span class="span-highlight-text">Post</span> table. <span class="span-highlight-text">HasManyToMany</span> method is used to represent many-to-many relationship between <span class="span-highlight-text">Post</span> and <span class="span-highlight-text">Tag</span> and this is achieved through an intermediate table called <span class="span-highlight-text">PostTagMap</span>. You can learn more details about Fluent NHibernate and it's extension methods from <a class="external-ref-link" target="_blank" href="https://github.com/jagregory/fluent-nhibernate/wiki/Fluent-mapping">here</a>.
</p>

<p>
  The mapping classes of <span class="span-highlight-text">Category</span> and <span class="span-highlight-text">Tag</span> are pretty much same except the relationship they have with <span class="span-highlight-text">Post</span>. <span class="span-highlight-text">Category</span> has one-to-many relationship while <span class="span-highlight-text">Tag</span> has many-to-many relationship with <span class="span-highlight-text">Post</span>.
</p>

<div><div id="highlighter_322491" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Core.Mappings</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">CategoryMap: ClassMap&lt;Category&gt;</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">CategoryMap()</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Id(x =&gt; x.Id);</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.Name)</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Length(50)</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Not.Nullable();</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.UrlSlug)</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Length(50)</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Not.Nullable();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.Description)</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Length(200);</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">HasMany(x =&gt; x.Posts)</code></div><div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Inverse()</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Cascade.All()</code></div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.KeyColumn(</code><code class="csharp string">"Category"</code><code class="csharp plain">);</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number25 index24 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number26 index25 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 7. CategoryMap class
</p>

<div><div id="highlighter_830362" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Core.Mappings</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{&nbsp;&nbsp;&nbsp; </code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">TagMap: ClassMap&lt;Tag&gt;</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">TagMap()</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Id(x =&gt; x.Id);</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.Name)</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Length(50)</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Not.Nullable();</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.UrlSlug)</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Length(50)</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Not.Nullable();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Map(x =&gt; x.Description)</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Length(200);</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">HasManyToMany(x =&gt; x.Posts)</code></div><div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Cascade.All().Inverse()</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Table(</code><code class="csharp string">"PostTagMap"</code><code class="csharp plain">);</code></div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number25 index24 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 8. TagMap class
</p>

<p>
  We are going to use the <span class="span-highlight-text">Repository pattern</span> for database access. We are using this pattern to decouple the data access code from our controllers and that helps us to simplify unit testing our controllers. The core of the repository pattern is an interface which contains the definitions for all the data-access methods.
</p>

<p>
  Let's create an interface <span class="span-highlight-text">IBlogRepository</span> in the <span class="span-highlight-text">JustBlog.Core</span> project with couple of method definitions.
</p>

<div><div id="highlighter_126313" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Core</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">interface</code> <code class="csharp plain">IBlogRepository</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">IList&lt;Post&gt; Posts(</code><code class="csharp keyword">int</code> <code class="csharp plain">pageNo, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageSize);</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">int</code> <code class="csharp plain">TotalPosts();</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number8 index7 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 9. IBlogRepository
</p>


<p>
  The <span class="span-highlight-text">Posts</span> method is used to return the latest published posts based on pagination values. The <span class="span-highlight-text">TotalPosts</span> method is used to return the total no. of published posts. We are going to fill the interface with more methods in the upcoming stories.
</p>

<p>
  Let's create a class with name <span class="span-highlight-text">BlogRepository</span> in the core project and implement the interface.
</p>

<div><div id="highlighter_335388" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">JustBlog.Core.Objects;</code></div><div class="line number2 index1 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">NHibernate;</code></div><div class="line number3 index2 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">NHibernate.Criterion;</code></div><div class="line number4 index3 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">NHibernate.Linq;</code></div><div class="line number5 index4 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">NHibernate.Transform;</code></div><div class="line number6 index5 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">System.Collections.Generic;</code></div><div class="line number7 index6 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">System.Linq;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Core</code></div><div class="line number10 index9 alt1"><code class="csharp plain">{</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">BlogRepository: IBlogRepository</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">// NHibernate object</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">private</code> <code class="csharp keyword">readonly</code> <code class="csharp plain">ISession _session;</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">BlogRepository(ISession session)</code></div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">_session = session;</code></div><div class="line number19 index18 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Post&gt; Posts(</code><code class="csharp keyword">int</code> <code class="csharp plain">pageNo, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageSize)</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var posts = _session.Query&lt;Post&gt;()</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Where(p =&gt; p.Published)</code></div><div class="line number25 index24 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.OrderByDescending(p =&gt; p.PostedOn)</code></div><div class="line number26 index25 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Skip(pageNo * pageSize)</code></div><div class="line number27 index26 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Take(pageSize)</code></div><div class="line number28 index27 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Fetch(p =&gt; p.Category)</code></div><div class="line number29 index28 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.ToList();</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var postIds = posts.Select(p =&gt; p.Id).ToList();</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">_session.Query&lt;Post&gt;()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class="line number34 index33 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Where(p =&gt; postIds.Contains(p.Id))</code></div><div class="line number35 index34 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.OrderByDescending(p =&gt; p.PostedOn)</code></div><div class="line number36 index35 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.FetchMany(p =&gt; p.Tags)</code></div><div class="line number37 index36 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.ToList();</code></div><div class="line number38 index37 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number39 index38 alt2">&nbsp;</div><div class="line number40 index39 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">int</code> <code class="csharp plain">TotalPosts()</code></div><div class="line number41 index40 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number42 index41 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">_session.Query&lt;Post&gt;().Where(p =&gt; p.Published).Count();</code></div><div class="line number43 index42 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number44 index43 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number45 index44 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 10. BlogRepository
</p>


<p>
  All the calls to the database has to be made through the <span class="span-highlight-text">NHibernate</span>'s <span class="span-highlight-text">ISession</span> object. When we read the collection of posts using <span class="span-highlight-text">ISession</span>, the dependencies <span class="span-highlight-text">Category</span> and <span class="span-highlight-text">Tags</span> are not populated by default. <span class="span-highlight-text">Fetch</span> and <span class="span-highlight-text">FetchMany</span> methods are used to tell <span class="span-highlight-text">NHibernate</span> to populate them eagerly.
</p>

<p>
  In the <span class="span-highlight-text">Posts</span> method, we've queried database twice to get the posts because we've to eager load all the associated tags. We can't use <span class="span-highlight-text">FetchMany</span> along with <span class="span-highlight-text">Skip</span> and <span class="span-highlight-text">Take</span> methods in the Linq query. So, first we've fetched all the posts then from their ids we've queried again to get them with their tags. Please see <a href="http://stackoverflow.com/questions/9729262/nhibernate-linq-provider-and-take-skip-with-eager-fetching" target="_blank" rel="nofollow">this thread</a> for more information about this issue.
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">NHibernate ISession</span>
	<p style="margin-top: 10px;">
	  ISession is the persistence manager interface that is used to store and retrieve entities to and from the database.
	</p>
  </div>
</div>

<h3 id="story1-configure-ninject">4.4 Configure Ninject for JustBlog.Core project</h3>

<p>
  <span class="span-highlight-text">Dependency injection</span> (DI) helps to avoid instantiating the concrete implementations of dependencies inside a class. These dependencies are usually injected to a class through constructor but sometimes through properties as well. One of the main advantage of dependency injection is unit testing and we will see that when we write unit tests for controllers in <a class="external-ref-link" target="_blank" href="http://prideparrot.com/blog/archive/2013/3/how_to_create_simple_blog_part2">Part II</a>.
</p>

<p>
  There are many frameworks available to simplify dependency injection like <span class="span-highlight-text">Castle Windsor</span>, <span class="span-highlight-text">Unity</span>, <span class="span-highlight-text">Autofac</span>, <span class="span-highlight-text">StructureMap</span>, <span class="span-highlight-text">Ninject</span> etc. We have picked <span class="span-highlight-text">Ninject</span> because it's easy to use.
</p>

<p>
  We can install <span class="span-highlight-text">Ninject</span> in the <span class="span-highlight-text">JustBlog.Core</span> project by executing the following commands in <span class="span-highlight-text">Package Manager Console</span>.
</p>

<div style="font-weight: bold;">
  <p>
	PM&gt; Install-Package Ninject
	<br>
	PM&gt; Install-Package Ninject.Web.Common
  </p>
</div>

<p>
  If the commands are executed successfully we will see both the <span class="span-highlight-text">Ninject</span> and <span class="span-highlight-text">Ninject.Web.Common</span> assemblies added to the project. Along with the assemblies a class file with name <span class="span-highlight-text">NinjectWebCommon.cs</span> also added in the <span class="span-highlight-text">App_Start</span> folder. I'll explain the reason why we need to install the extension <span class="span-highlight-text">Ninject.Web.Common</span> soon.
</p>

<p>
  We can configure <span class="span-highlight-text">Ninject</span> in web application using two approaches, either using <span class="span-highlight-text">Global.asax.cs</span> or through <span class="span-highlight-text">App_Start</span>. We are going to use the first approach so please delete the <span class="span-highlight-text">NinjectWebCommon.cs</span> file from the <span class="span-highlight-text">App_Start</span> folder and also remove the unncessary references to <span class="span-highlight-text">WebActivator</span> and <span class="span-highlight-text">Microsoft.Web.Infrastructure</span> assemblies from the project. 
</p>

<p>
  The core functionality of any DI framework is to map the interfaces with concrete implementations. Mapping an interface with a particular implementation is called as binding. We can group a set of bindings related to a particular module in <span class="span-highlight-text">Ninject</span> using <span class="span-highlight-text">Ninject Modules</span>. All bindings and modules are loaded to the core component of <span class="span-highlight-text">Ninject</span> called <span class="span-highlight-text">Kernel</span>. Whenever the application needs an instance of a concrete class that implements the interface, it is the <span class="span-highlight-text">Kernel</span> that provides one.
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">Ninject Module</span>
	<p style="margin-top: 10px;">
	  An Ninject module is used to group the mappings/bindings related to a particular module in a single class.
	</p>
  </div>
</div>

<p>
  The <span class="span-highlight-text">BlogRepository</span> class has a dependency with <span class="span-highlight-text">Nibernate</span>'s <span class="span-highlight-text">ISession</span>. To create an instance of <span class="span-highlight-text">ISession</span> we need the help of another <span class="span-highlight-text">Nibernate</span> interface called <span class="span-highlight-text">ISessionFactory</span>. Let's create an ninject module class with name <span class="span-highlight-text">RepositoryModule</span> that bind both these interfaces in the <span class="span-highlight-text">JustBlog.Core</span> project.
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">NHibernate ISessionFactory</span>
	<p style="margin-top: 10px;">
	  Unlike ISession we need a single instance of ISessionFactory throughout the application.
	</p>
  </div>
</div>

<div><div id="highlighter_304681" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">FluentNHibernate.Cfg;</code></div><div class="line number2 index1 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">FluentNHibernate.Cfg.Db;</code></div><div class="line number3 index2 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">JustBlog.Core.Objects;</code></div><div class="line number4 index3 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">NHibernate;</code></div><div class="line number5 index4 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">NHibernate.Cache;</code></div><div class="line number6 index5 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">Ninject;</code></div><div class="line number7 index6 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">Ninject.Modules;</code></div><div class="line number8 index7 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">Ninject.Web.Common;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Core</code></div><div class="line number11 index10 alt2"><code class="csharp plain">{</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">RepositoryModule: NinjectModule</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">override</code> <code class="csharp keyword">void</code> <code class="csharp plain">Load()</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Bind&lt;ISessionFactory&gt;()</code></div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.ToMethod</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">(</code></div><div class="line number19 index18 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">e =&gt; </code></div><div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Fluently.Configure()</code></div><div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Database(MsSqlConfiguration.MsSql2008.ConnectionString(c =&gt;&nbsp;&nbsp; </code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">c.FromConnectionStringWithKey(</code><code class="csharp string">"JustBlogDbConnString"</code><code class="csharp plain">)))</code></div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Cache(c =&gt; c.UseQueryCache().ProviderClass&lt;HashtableCacheProvider&gt;())</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Mappings(m =&gt; m.FluentMappings.AddFromAssemblyOf&lt;Post&gt;())</code></div><div class="line number25 index24 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.ExposeConfiguration(cfg =&gt; </code><code class="csharp keyword">new</code> <code class="csharp plain">SchemaExport(cfg).Execute(</code><code class="csharp keyword">true</code><code class="csharp plain">, </code><code class="csharp keyword">true</code><code class="csharp plain">, </code><code class="csharp keyword">false</code><code class="csharp plain">))</code></div><div class="line number26 index25 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.BuildConfiguration()</code></div><div class="line number27 index26 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.BuildSessionFactory()</code></div><div class="line number28 index27 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">)</code></div><div class="line number29 index28 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.InSingletonScope();</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Bind&lt;ISession&gt;()</code></div><div class="line number32 index31 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.ToMethod((ctx) =&gt; ctx.Kernel.Get&lt;ISessionFactory&gt;().OpenSession())</code></div><div class="line number33 index32 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.InRequestScope();</code></div><div class="line number34 index33 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number35 index34 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number36 index35 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 11. RepositoryModule
</p>

<p>
  To create an <span class="span-highlight-text">Ninject module</span> we have to inherit from the abstract class <span class="span-highlight-text">NinjectModule</span> and implement the <span class="span-highlight-text">Load</span> method. In the <span class="span-highlight-text">Load</span> method, we have mapped (binded) both the interfaces to methods using the <span class="span-highlight-text">Bind</span> method.
</p>

<p>
  At a simple level, the <span class="span-highlight-text">Bind</span> method is used to map an interface with a class that implements it.
</p>

<p>
  Ex.
</p>

<div><div id="highlighter_369380" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">Bind&lt;IFoo&gt;().To&lt;Foo&gt;();</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 12. Binding interface to class
</p>

<p>
  You could also map the interface with a method which instantiate and return an implementation of the interface. Binding interface to a method is very handy when creating an instance requires additional work.
</p>

<div><div id="highlighter_573956" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">Bind&lt;IFoo&gt;().ToMethod(c =&gt; {</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var foo = </code><code class="csharp keyword">new</code> <code class="csharp plain">Foo();</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">foo;</code></div><div class="line number4 index3 alt1"><code class="csharp plain">});</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 13. Binding interface to method
</p>

<p>
  We have used the Fluent API's extension methods to create an instance of <span class="span-highlight-text">ISessionFactory</span>.
</p>

<div><div id="highlighter_783374" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">Fluently.Configure()</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Database(MsSqlConfiguration.MsSql2008.ConnectionString(c =&gt;&nbsp;&nbsp; </code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">c.FromConnectionStringWithKey(</code><code class="csharp string">"JustBlogDbConnString"</code><code class="csharp plain">)))</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Cache(c =&gt; c.UseQueryCache().ProviderClass&lt;HashtableCacheProvider&gt;())</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Mappings(m =&gt; m.FluentMappings.AddFromAssemblyOf&lt;Post&gt;())</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.ExposeConfiguration(cfg =&gt; </code><code class="csharp keyword">new</code> <code class="csharp plain">SchemaExport(cfg).Execute(</code><code class="csharp keyword">true</code><code class="csharp plain">, </code><code class="csharp keyword">true</code><code class="csharp plain">, </code><code class="csharp keyword">false</code><code class="csharp plain">))</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.BuildConfiguration()</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.BuildSessionFactory()</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 14. Configuring through fluent extension methods
</p>

<p>
  The chained extension methods may look little confusing! The following are the things that we are doing through those methods.
</p>

<p style="font-style: italic;">
  a. Setting the database connection string (<span class="span-highlight-text">Database</span>)
  <br>
  b. Setting a provider to cache the queries (<span class="span-highlight-text">Cache</span>)
  <br>
  c. Specifying the assembly where the domain &amp; mapping classes exists (<span class="span-highlight-text">Mappings</span>)
  <br>
  d. Ask <span class="span-highlight-text">NHibernate</span> to create tables from the classes (<span class="span-highlight-text">ExposeConfiguration</span>)
</p>

<p>
  There are many extensions available with <span class="span-highlight-text">Ninject</span> and one of them is <span class="span-highlight-text">Ninject.Web.Common</span> which contains some common functionalities required for both WebForms and MVC applications. We have used that extension in the above case to set the scope of the <span class="span-highlight-text">ISession</span> to a request level, means until the request completes <span class="span-highlight-text">Ninject</span> uses the same instance of <span class="span-highlight-text">ISession</span> throughout the code. The <span class="span-highlight-text">InRequestScope()</span> extension method lives in the <span class="span-highlight-text">Ninject.Web.Common</span> assembly. We need a single instance of <span class="span-highlight-text">ISessionFactory</span> throughout the application and so we have scoped it to singleton (<span class="span-highlight-text">InSingletonScope()</span>).
</p>

<h3 id="story1-configure-ninject-mvc">4.5 Configure Ninject for MVC project</h3>

<p>
  All the database calls from the controllers are streamlined through the <span class="span-highlight-text">IBlogRepository</span> interface. To inject an instance of a class that implements <span class="span-highlight-text">IBlogRepository</span> to a controller we need to configure <span class="span-highlight-text">Ninject</span> in MVC application as well. There is an  extension (<span class="span-highlight-text">Ninject.Mvc3</span>) available to specifically support for MVC applications. We can install it to our MVC project by running the following command.
</p>

<div style="font-weight: bold;">
  <p>
	P&gt; Install-Package Ninject.Mvc3
  </p>
</div>

<p>
  On successfully executing the command the following assemblies are added to the MVC project.
</p>

<p>
  <span class="span-highlight-text">Ninject</span>
  <br>
  <span class="span-highlight-text">Ninject.Web.Common</span>
  <br>
  <span class="span-highlight-text">Ninject.Web.Mvc</span>
</p>

<p>
  Remove the <span class="span-highlight-text">NinjectWebCommon.cs</span> file from the <span class="span-highlight-text">App_Start</span> folder and derive our global application class from <span class="span-highlight-text">NinjectHttpApplication</span> class and override the <span class="span-highlight-text">CreateKernel</span> method.
</p>

<div><div id="highlighter_697787" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">Ninject;</code></div><div class="line number2 index1 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">Ninject.Web.Common;</code></div><div class="line number3 index2 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">System.Web.Mvc;</code></div><div class="line number4 index3 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">System.Web.Routing;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog</code></div><div class="line number7 index6 alt2"><code class="csharp plain">{</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">MvcApplication : NinjectHttpApplication</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">protected</code> <code class="csharp keyword">override</code> <code class="csharp plain">IKernel CreateKernel()</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var kernel = </code><code class="csharp keyword">new</code> <code class="csharp plain">StandardKernel();</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">kernel.Load(</code><code class="csharp keyword">new</code> <code class="csharp plain">RepositoryModule());</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">kernel.Bind&lt;IBlogRepository&gt;().To&lt;BlogRepository&gt;();</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">kernel;</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">protected</code> <code class="csharp keyword">override</code> <code class="csharp keyword">void</code> <code class="csharp plain">OnApplicationStarted()</code></div><div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</code></div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">RouteConfig.RegisterRoutes(RouteTable.Routes);</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">base</code><code class="csharp plain">.OnApplicationStarted();</code></div><div class="line number25 index24 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number26 index25 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number27 index26 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 15. Global Application Class
</p>

<p>
  In the <span class="span-highlight-text">CreateKernel</span> method, we are creating and returning an instance of <span class="span-highlight-text">StandardKernel</span> which is a type of <span class="span-highlight-text">IKernel</span>. <span class="span-highlight-text">IKernel</span> is the core of the application where we specify our bindings and when we need an instance of a mapped interface it is the one that provides. 
</p>

<p>
  We are doing couple of important things in the <span class="span-highlight-text">StandardKernel</span> object. First, we are loading an instance of our <span class="span-highlight-text">Repository</span> module that contains all the bindings related to <span class="span-highlight-text">NHibernate</span> interfaces to it and then specify another binding that maps the <span class="span-highlight-text">IBlogRepository</span> to <span class="span-highlight-text">BlogRepository</span> directly to it.
Finally the code we have to run at the application startup has to moved to the <span class="span-highlight-text">OnApplicationStarted</span> method.
</p>

<p>
  That's all about the configuration work for <span class="span-highlight-text">Ninject</span> in application. Let's start working on controllers and actions.
</p>

<h3 id="story1-create-controller-actions">4.6 Create controller and actions</h3>

<p>
  So far we have concentrated more time on building the models, data-access classes using <span class="span-highlight-text">NHibernate/Fluent NHibernate</span> and also configuring <span class="span-highlight-text">Ninject</span> for dependency injection. Now it's time to concentrate on building our MVC project. 
</p>

<p>
  Let's create a controller by right-clicking at the <span class="span-highlight-text">Controllers</span> folder -&gt; <span class="span-highlight-text">Add</span> -&gt; <span class="span-highlight-text">Controller</span>. Name the controller as <span class="span-highlight-text">BlogController</span>.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_addcontroller.png" title="Add Controller">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_addcontroller.png" class="post-diagram" alt="Add Controller">
  </a>
  <p class="post-img-caption">Add Controller</p>
</div>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_addblogcontroller.png" title="Add Blog Controller">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_addblogcontroller.png" class="post-diagram" alt="Add Blog Controller">
  </a>
  <p class="post-img-caption">Add Blog Controller</p>
</div>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">Controller</span>
	<p style="margin-top: 10px;">
	  In MVC architecture, Controller is the component that handles requests from clients, process them and provide a response. In ASP.NET MVC application all the controllers are usually placed in the Controllers folder. Each controller has to be suffixed with the name "Controller". The component that responsible for searching controllers looks for classes that derives from the class Controller and whose name ends with "Controller".
	</p>
  </div>
</div>

<p>
  Create a constructor that takes <span class="span-highlight-text">IBlogRepository</span> as input parameter. <span class="span-highlight-text">Ninject</span> will take care of providing an instance of <span class="span-highlight-text">BlogRepository</span> to the <span class="span-highlight-text">BlogController</span> while instantiating it.
</p>

<div><div id="highlighter_833195" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">JustBlog.Core;</code></div><div class="line number2 index1 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">System.Web.Mvc;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Controllers</code></div><div class="line number5 index4 alt2"><code class="csharp plain">{</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">BlogController</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">private</code> <code class="csharp keyword">readonly</code> <code class="csharp plain">IBlogRepository _blogRepository;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">BlogController(IBlogRepository blogRepository)</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">_blogRepository = blogRepository;</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number15 index14 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 16. BlogController
</p>

<p>Create a method with name <span class="span-highlight-text">Posts</span> that takes an input parameter <span class="span-highlight-text">p</span> for page number,</p>

<div><div id="highlighter_92198" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">ViewResult Posts(</code><code class="csharp keyword">int</code> <code class="csharp plain">p = 1)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">// TODO: read and return posts from repository</code></div><div class="line number4 index3 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 17. Posts action
</p>

<p>
  Any public method in a controller can be called as an <span class="span-highlight-text">action</span>. Usually actions returns any type that derives from <span class="span-highlight-text">ActionResult</span>. In the above <span class="span-highlight-text">Posts</span> action, we are going to return a view and for that we have used the <span class="span-highlight-text">ViewResult</span> as return type.
</p>

<p>
  The other types of <span class="span-highlight-text">ActionResult</span> are:
</p>

<table style="width: 100%;">
  <thead>
	<tr>
	  <th style="width: 30%;">Type</th>
	  <th style="width: 70%;">Description</th>
	</tr>
	<tr>
	  <td>PartialViewResult
	  </td>
	  <td>Renders a partial view
	  </td>
	</tr>
	<tr>
	  <td>RedirectToRouteResult
	  </td>
	  <td>Issues a HTTP 301 or 302 redirection to an action method or specific route entry, generating a URL according to your routing configuration.
	  </td>
	</tr>
	<tr>
	  <td>RedirectResult
	  </td>
	  <td>Issues a HTTP 301 or 302 redirection to a specified URL.
	  </td>
	</tr>
	<tr>
	  <td>ContentResult
	  </td>
	  <td>Returns a raw textual data to the browser, optionally setting a content-type header.
	  </td>
	</tr>
	<tr>
	  <td>FileResult
	  </td>
	  <td>Transmits binary data (such as a file from disk or a byte array in memory) directly to the browser.
	  </td>
	</tr>
	<tr>
	  <td>JsonResult
	  </td>
	  <td>Renders JSON content to client.
	  </td>
	</tr>
	<tr>
	  <td>JavaScriptResult
	  </td>
	  <td>Sends a snippet of JavaScript source code that should be executed by the browser.
	  </td>
	</tr>
	<tr>
	  <td>HttpUnauthorizeResult
	  </td>
	  <td>Set the response HTTP status code to 401 (meaning "not authorized"), which causes the active authentication mechanism (forms authentication or Windows authentication) to ask the visitor to log in.
	  </td>
	</tr>
	<tr>
	  <td>HttpNotFoundResult
	  </td>
	  <td>Returns a HTTP 404 - Not found error.
	  </td>
	</tr>
	<tr>
	  <td>HttpStatusCodeResult
	  </td>
	  <td>Returns a specified HTTP code.
	  </td>
	</tr>
	<tr>
	  <td>EmptyResult
	  </td>
	  <td>Does nothing.
	  </td>
	</tr>
  </thead>
</table>
<span class="table-caption">Different types of built-in ActionResults. Source: Pro ASP.NET MVC 3 by Adam &amp; Steven</span>

<p>
  The parameter <span class="span-highlight-text">p</span> in the <span class="span-highlight-text">Posts</span> action represents the page number. The default value of <span class="span-highlight-text">p</span> is <span class="span-highlight-text">1</span> and that represents the first page. Inside the action all we have to do is fetch the latest posts by calling the <span class="span-highlight-text">Posts</span> method of <span class="span-highlight-text">IBlogRepository</span> and feed that to the view.
</p>

<p>
  Along with the latest posts we also need to feed the total no. of posts to the view which is required for showing pagination links in the view. This is a perfect scenario where we can go for <span class="span-highlight-text">View Models</span>.
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">View Models</span>
	<p style="margin-top: 10px;">
	  View Models are classes specially created for views. They contains properties related to both domain as well as UI.
	</p>
  </div>
</div>

<p>
  Create a class with name <span class="span-highlight-text">ListViewModel</span> under the <span class="span-highlight-text">Models</span> folder that wraps both the collection of active posts and their total number.
</p>

<div><div id="highlighter_886032" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">JustBlog.Core;</code></div><div class="line number2 index1 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">System.Collections.Generic;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Models</code></div><div class="line number5 index4 alt2"><code class="csharp plain">{</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">ListViewModel</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Post&gt; Posts { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">int</code> <code class="csharp plain">TotalPosts { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number11 index10 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>


<p class="listing">
  Listing 18. ListViewModel
</p>

<p>Here is the initial implementation of the <span class="span-highlight-text">Posts</span> action.</p>

<div><div id="highlighter_490350" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">ViewResult Posts(</code><code class="csharp keyword">int</code> <code class="csharp plain">p = 1)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">// pick latest 10 posts</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var posts = _blogRepository.Posts(p - 1, 10); </code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var totalPosts = _blogRepository.TotalPosts();</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var listViewModel = </code><code class="csharp keyword">new</code> <code class="csharp plain">ListViewModel</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ </code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Posts = posts, </code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">TotalPosts = totalPosts </code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">};</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">ViewBag.Title = </code><code class="csharp string">"Latest Posts"</code><code class="csharp plain">;</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">View(</code><code class="csharp string">"List"</code><code class="csharp plain">, listViewModel);</code></div><div class="line number17 index16 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 19. Posts action
</p>

<p>
  We are passing the title that has to be set in the view through the <span class="span-highlight-text">ViewBag</span>. <span class="span-highlight-text">ViewBag</span> is a dynamic wrapper around the <span class="span-highlight-text">ViewData</span> dictionary. Instead of directly instantiating and returning <span class="span-highlight-text">ViewResult</span> we have utilized the built-in helper method called <span class="span-highlight-text">View</span> to accompilsh the job. The first parameter we have passed to the <span class="span-highlight-text">View</span> method is the name of the view and the next parameter is the model.
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">Passing data to views</span>
	<br>
	<p style="margin-top: 10px;">
	  ViewBag or ViewData is used to pass data from a controller to a view. They are encouraged to be used when you want to pass small pieces of information to a view and in other cases it's always good to go for strongly-typed views.
	</p>
  </div>
</div>

<p>
  Instead of getting the latest posts through <span class="span-highlight-text">_blogRepository</span> in <span class="span-highlight-text">Posts</span> action we can delegate that to the <span class="span-highlight-text">ListViewModel</span> by passing to it.
</p>

<div><div id="highlighter_251555" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">ListViewModel</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">ListViewModel(IBlogRepository _blogRepository, </code><code class="csharp keyword">int</code> <code class="csharp plain">p)</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Posts = _blogRepository.Posts(p - 1, 10);</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">TotalPosts = _blogRepository.TotalPosts();</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Post&gt; Posts { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">int</code> <code class="csharp plain">TotalPosts { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number11 index10 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 20. ListViewModel
</p>

<p>
  Here is our modified action.
</p>

<div><div id="highlighter_547939" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">ViewResult Posts(</code><code class="csharp keyword">int</code> <code class="csharp plain">p = 1)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var viewModel = </code><code class="csharp keyword">new</code> <code class="csharp plain">ListViewModel(_blogRepository, p);</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">ViewBag.Title = </code><code class="csharp string">"Latest Posts"</code><code class="csharp plain">;</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">View(</code><code class="csharp string">"List"</code><code class="csharp plain">, viewModel);</code></div><div class="line number7 index6 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 21. Posts action
</p>

<p>
  Our controller and action is ready and it's time to work on the view.
</p>

<h3 id="story1-create-view">4.7 Create view</h3>

<p>
  I've downloaded a free template for our blog from <a href="http://www.html5webtemplates.co.uk/" target="_blank">here</a>, you can download the modified css and images of the template from <a href="https://github.com/VJAI/JustBlog/tree/master/src/JustBlog/JustBlog/Content/themes/simple" target="_blank">GitHub</a> or attached source-code.
</p>

<h4 id="story1-setting-theme-layout">4.7.1 Setting up the theme and layout</h4>

<p>
  Create a folder with name <span class="span-highlight-text">Content</span> at the root of your MVC project. Under <span class="span-highlight-text">Content</span>, create folders <span class="span-highlight-text">themes &gt; simple</span>. Move the downloaded stylesheet to the <span class="span-highlight-text">simple</span> folder and the images to a new folder <span class="span-highlight-text">images</span> under <span class="span-highlight-text">simple</span>. The MVC project should look like below if you have done everything correctly.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_themefolders.png" title="Theme folders">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_themefolders.png" class="post-diagram" alt="Theme folders">
  </a>
  <p class="post-img-caption">Theme folders</p>
</div>

<h4>Layout</h4>

<p>
  Like <span class="span-highlight-text">Master Pages</span> in <span class="span-highlight-text">WebForms</span> it's <span class="span-highlight-text">Layouts</span> in <span class="span-highlight-text">MVC</span>. A site can have as many layouts as it needs and they contain the common html content that should appear throughout all the views. Let's create a new folder called <span class="span-highlight-text">Shared</span> under <span class="span-highlight-text">Views</span>. Right click the folder and select "Add View". Type the view name as <span class="span-highlight-text">_Layout</span> and uncheck the "Use a layout or master page". We are going to use <span class="span-highlight-text">Razor view engine</span> for building the view and so make sure the "View engine" dropdown is set to <span class="span-highlight-text">Razor (CSHTML)</span>.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_layout.png" title="Layout">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_layout.png" class="post-diagram" alt="Layout">
  </a>
  <p class="post-img-caption">Layout</p>
</div>

<p>Replace the contents of <span class="span-highlight-text">_Layout.cshtml</span> as below.</p>

<div><div id="highlighter_355852" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">&lt;!DOCTYPE html&gt;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="html plain">&lt;</code><code class="html keyword">html</code><code class="html plain">&gt;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="html plain">&lt;</code><code class="html keyword">head</code><code class="html plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">meta</code> <code class="html color1">name</code><code class="html plain">=</code><code class="html string">"viewport"</code> <code class="html color1">content</code><code class="html plain">=</code><code class="html string">"width=device-width"</code> <code class="html plain">/&gt;</code></div><div class="line number7 index6 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">title</code><code class="html plain">&gt;@ViewBag.Title&lt;/</code><code class="html keyword">title</code><code class="html plain">&gt;</code></div><div class="line number8 index7 alt1"><code class="html spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html comments">&lt;!-- Stylesheets --&gt;</code></div><div class="line number10 index9 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">link</code> <code class="html color1">rel</code><code class="html plain">=</code><code class="html string">"stylesheet"</code> <code class="html color1">type</code><code class="html plain">=</code><code class="html string">"text/css"</code></div><div class="line number11 index10 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html color1">href</code><code class="html plain">=</code><code class="html string">"@Url.Content("</code><code class="html plain">~/Content/themes/simple/style.css")" /&gt;</code></div><div class="line number12 index11 alt1"><code class="html plain">&lt;/</code><code class="html keyword">head</code><code class="html plain">&gt;</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="html plain">&lt;</code><code class="html keyword">body</code><code class="html plain">&gt;</code></div><div class="line number15 index14 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"main"</code><code class="html plain">&gt;</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html comments">&lt;!-- Header --&gt;</code></div><div class="line number18 index17 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"header"</code><code class="html plain">&gt;</code></div><div class="line number19 index18 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"logo"</code><code class="html plain">&gt;</code></div><div class="line number20 index19 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"logo_text"</code><code class="html plain">&gt;</code></div><div class="line number21 index20 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">h1</code><code class="html plain">&gt;&lt;</code><code class="html keyword">a</code> <code class="html color1">href</code><code class="html plain">=</code><code class="html string">"/"</code><code class="html plain">&gt;Just&lt;</code><code class="html keyword">span</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"logo_colour"</code><code class="html plain">&gt;Blog&lt;/</code><code class="html keyword">span</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">a</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">h1</code><code class="html plain">&gt;</code></div><div class="line number22 index21 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">h2</code><code class="html plain">&gt;Writings, Experiments and More...&lt;/</code><code class="html keyword">h2</code><code class="html plain">&gt;</code></div><div class="line number23 index22 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number24 index23 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html comments">&lt;!-- Navigation --&gt;</code></div><div class="line number27 index26 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"menubar"</code><code class="html plain">&gt;</code></div><div class="line number28 index27 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">ul</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"menu"</code><code class="html plain">&gt;</code></div><div class="line number29 index28 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">li</code><code class="html plain">&gt;&lt;</code><code class="html keyword">a</code> <code class="html color1">href</code><code class="html plain">=</code><code class="html string">"#"</code><code class="html plain">&gt;Posts&lt;/</code><code class="html keyword">a</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">li</code><code class="html plain">&gt;</code></div><div class="line number30 index29 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">li</code><code class="html plain">&gt;&lt;</code><code class="html keyword">a</code> <code class="html color1">href</code><code class="html plain">=</code><code class="html string">"#"</code><code class="html plain">&gt;Contact&lt;/</code><code class="html keyword">a</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">li</code><code class="html plain">&gt;</code></div><div class="line number31 index30 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">li</code><code class="html plain">&gt;&lt;</code><code class="html keyword">a</code> <code class="html color1">href</code><code class="html plain">=</code><code class="html string">"#"</code><code class="html plain">&gt;About Me&lt;/</code><code class="html keyword">a</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">li</code><code class="html plain">&gt;</code></div><div class="line number32 index31 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">ul</code><code class="html plain">&gt;</code></div><div class="line number33 index32 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number36 index35 alt1">&nbsp;</div><div class="line number37 index36 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html comments">&lt;!-- Site Content --&gt;</code></div><div class="line number38 index37 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"site_content"</code><code class="html plain">&gt;</code></div><div class="line number39 index38 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">@RenderBody()</code></div><div class="line number40 index39 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number41 index40 alt2">&nbsp;</div><div class="line number42 index41 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html comments">&lt;!-- Footer --&gt;</code></div><div class="line number43 index42 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"footer"</code><code class="html plain">&gt;</code></div><div class="line number44 index43 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">Copyright © @DateTime.Now.Year JustBlog All Rights Reserved</code></div><div class="line number45 index44 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number46 index45 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number47 index46 alt2"><code class="html plain">&lt;/</code><code class="html keyword">body</code><code class="html plain">&gt;</code></div><div class="line number48 index47 alt1"><code class="html plain">&lt;/</code><code class="html keyword">html</code><code class="html plain">&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 22. _Layout.cshtml
</p>

<p>
  The layout contain mainly four sections <span class="span-highlight-text">Header</span>, <span class="span-highlight-text">Navigation</span>, <span class="span-highlight-text">Content</span> and <span class="span-highlight-text">Footer</span>. There are couple of interesting things to note down. The <span class="span-highlight-text">ViewBag.Title</span> that we have passed from the controller is used in the <span class="span-highlight-text">&lt;title&gt;</span> section. Next thing is the <span class="span-highlight-text">RenderBody</span> method. The <span class="span-highlight-text">RenderBody</span> method generate the actual content of the view and place it where it's been called.
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">Setting Layouts for Views</span>
	<p style="margin-top: 7px;">
	  We can set a layout to a view through the Layout property of the view
	  <br>
	  <br>
	  Ex.
	  <br>
	  <b><u>Home.cshtml</u>
		<br>
		@{
		<br>
		&nbsp;&nbsp;&nbsp;Layout = "~/Views/Shared/_Layout.cshtml";
		<br>
		}</b>
	  <br>
	  Instead of setting the layout for each view individually we can set that globally using the _ViewStart.cshtml file.
	</p>
  </div>
</div>

<p>
  We can set the layout for all the views globally through the <span class="span-highlight-text">_ViewStart.cshtml</span>. As the name this file is executed before calling each view. Create the <span class="span-highlight-text">_ViewStart.cshtml</span> under the <span class="span-highlight-text">Views</span> folder with the following contents.
</p>

<div><div id="highlighter_603851" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">@{</code></div><div class="line number2 index1 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">Layout = "~/Views/Shared/_Layout.cshtml";</code></div><div class="line number3 index2 alt2"><code class="html plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 23. _ViewStart.cshtml
</p>

<h4 id="story1-fixing-anchor-links">4.7.2 Fixing anchor links</h4>

<p>
  We have some work to do in the anchor links in the navigation sections.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_anchorlinks.png" title="Navigation">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_anchorlinks.png" class="post-diagram" alt="Navigation">
  </a>
  <p class="post-img-caption">Navigation</p>
</div>

<div><div id="highlighter_995537" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">&lt;</code><code class="html keyword">ul</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"menu"</code><code class="html plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">li</code><code class="html plain">&gt;&lt;</code><code class="html keyword">a</code> <code class="html color1">href</code><code class="html plain">=</code><code class="html string">"#"</code><code class="html plain">&gt;Posts&lt;/</code><code class="html keyword">a</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">li</code><code class="html plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">li</code><code class="html plain">&gt;&lt;</code><code class="html keyword">a</code> <code class="html color1">href</code><code class="html plain">=</code><code class="html string">"#"</code><code class="html plain">&gt;Contact&lt;/</code><code class="html keyword">a</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">li</code><code class="html plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">li</code><code class="html plain">&gt;&lt;</code><code class="html keyword">a</code> <code class="html color1">href</code><code class="html plain">=</code><code class="html string">"#"</code><code class="html plain">&gt;About Me&lt;/</code><code class="html keyword">a</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">li</code><code class="html plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="html plain">&lt;/</code><code class="html keyword">ul</code><code class="html plain">&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 24. Navigation section
</p>

<p>
  Like <span class="span-highlight-text">ASP.NET controls</span> in <span class="span-highlight-text">WebForms</span>, <span class="span-highlight-text">MVC</span> has <span class="span-highlight-text">Html-Helpers</span>. <span class="span-highlight-text">Html-Helpers</span> are light-weight and they are just used to create simple html controls/elements like form, textbox, anchor links etc. The <span class="span-highlight-text">Html-Helpers</span> are available through the <span class="span-highlight-text">Html</span> property in views.
</p>

<p>
  To create an anchor link with name <span class="span-highlight-text">Posts</span> pointing to <span class="span-highlight-text">Posts</span> action, we can do that by,
</p>

<div><div id="highlighter_472971" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">@Html.ActionLink(</code><code class="csharp string">"Posts"</code><code class="csharp plain">, </code><code class="csharp string">"Posts"</code><code class="csharp plain">) </code><code class="csharp comments">// (link name, action)</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 25. Html.ActionLink
</p>

<p>
  The above razor statement will generate the following html,
</p>

<div><div id="highlighter_701716" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">&lt;</code><code class="html keyword">a</code> <code class="html color1">href</code><code class="html plain">=</code><code class="html string">"/Blog/Posts"</code><code class="html plain">&gt;Posts&lt;/</code><code class="html keyword">a</code><code class="html plain">&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 26. Generated anchor link
</p>

<p>
  Right now we have only the <span class="span-highlight-text">Posts</span> action but in the coming parts we will create actions to display contact and about me pages. After replacing the anchors with <span class="span-highlight-text">Html.ActionLink</span>s the navigation section will be,
</p>

<div><div id="highlighter_404388" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">&lt;</code><code class="html keyword">ul</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"menu"</code><code class="html plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">li</code><code class="html plain">&gt;@Html.ActionLink("Posts", "Posts")&lt;/</code><code class="html keyword">li</code><code class="html plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">li</code><code class="html plain">&gt;@Html.ActionLink("Contact", "Contact")&lt;/</code><code class="html keyword">li</code><code class="html plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">li</code><code class="html plain">&gt;@Html.ActionLink("About Me", "AboutMe")&lt;/</code><code class="html keyword">li</code><code class="html plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="html plain">&lt;/</code><code class="html keyword">ul</code><code class="html plain">&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 27. Navigation section
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">Html-Helpers</span>
	<p style="margin-top: 7px;">
	  The built-in html-helpers also helps to create input controls like textbox, checkbox, dropdowns and even html form.
	  <br>
	  <br>
	  Ex. <b>@Html.TextBox("Name")</b>
	  <br>
	  <br>
	  We can even create our own custom html-helpers.
	</p>
  </div>
</div>

<h4 id="story1-list-view">4.7.3 List view</h4>

<p>
  We can create a view for an action by right-clicking anywhere inside the action and selecting "Add View". When we create a view we can strongly tie it with a model and they are called as <span class="span-highlight-text">strongly-typed views</span>. In the "Add View" window, we have a "Create a strongly-typed view" checkbox and once you check that you can select the model through the "Model class" dropdown. Select the <span class="span-highlight-text">ListViewModel</span> in the dropdown and make sure the "Use a layout or master page" checkbox is checked.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_createlistview.png" title="Create List View">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_createlistview.png" class="post-diagram" alt="Create List View">
  </a>
  <p class="post-img-caption">Create List View</p>
</div>

<p>
  The generated <span class="span-highlight-text">List.cshtml</span> looks like below,
</p>

<div><div id="highlighter_306578" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">@model ListViewModel</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="html plain">@{</code></div><div class="line number4 index3 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">ViewBag.Title = "List";</code></div><div class="line number5 index4 alt2"><code class="html plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 28. List.cshtml
</p>

<p>
  The <span class="span-highlight-text">@model</span> directive at the top of the view says that it is strongly typed with the <span class="span-highlight-text">ListViewModel</span>.
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">Strongly-typed Views</span>
	<p style="margin-top: 7px;">
	  Unlike the normal views which inherit from System.Web.Mvc.ViewPage, a strongly-typed view inherits from System.Web.Mvc.ViewPage&lt;T&gt; and contains a Model property that is of type specified by T. The most important advantage of strongly-typing a view is intellisense support.
	</p>
  </div>
</div>

<p>The instance of <span class="span-highlight-text">ListViewModel</span> that we are passing from the <span class="span-highlight-text">Posts</span> action can be accessed right through the <span class="span-highlight-text">Model</span> property in the <span class="span-highlight-text">List</span> view.</p>

<p>
  In our <span class="span-highlight-text">List</span> view, all we have to do is iterate the <span class="span-highlight-text">Posts</span> collection and display them. On displaying each post we have to display the date on which it is posted, description and also the category and tags related to the post.
</p>

<p>
  Let's create a partial view that displays the details of a single post. <span class="span-highlight-text">Partial Views</span> are similar like <span class="span-highlight-text">User Controls</span> in <span class="span-highlight-text">WebForms</span>.
</p>

<p>
  We can create a partial view similar like a view. Right-click at the <span class="span-highlight-text">Shared</span> folder and select <span class="span-highlight-text">Add &gt; View</span>. In the "Add View" window select the <span class="span-highlight-text">Post</span> entity as model and check the "Create as partial view" checkbox. Name the partial view as <span class="span-highlight-text">_PostTemplate</span>.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_partialview.png" title="Create Partial View">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_partialview.png" class="post-diagram" alt="Create Partial View">
  </a>
  <p class="post-img-caption">Create Partial View</p>
</div>

<p>
  Add the following content to the <span class="span-highlight-text">_PostTemplate</span> partial view. The explanation follows the markup.
</p>

<div><div id="highlighter_962775" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">@model JustBlog.Core.Objects.Post</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post"</code><code class="html plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post-meta"</code><code class="html plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"row"</code><code class="html plain">&gt;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html comments">&lt;!--Heading--&gt;</code></div><div class="line number8 index7 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post-title"</code><code class="html plain">&gt;</code></div><div class="line number9 index8 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">h2</code><code class="html plain">&gt;@Html.PostLink(Model)&lt;/</code><code class="html keyword">h2</code><code class="html plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"row"</code><code class="html plain">&gt;</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html comments">&lt;!--Category--&gt;</code></div><div class="line number17 index16 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post-category"</code><code class="html plain">&gt;</code></div><div class="line number18 index17 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">span</code><code class="html plain">&gt;Category:&nbsp;&lt;/</code><code class="html keyword">span</code><code class="html plain">&gt;@Html.CategoryLink(Model.Category)</code></div><div class="line number19 index18 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html comments">&lt;!--Tags--&gt;</code></div><div class="line number22 index21 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post-tags"</code><code class="html plain">&gt;</code></div><div class="line number23 index22 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">span</code><code class="html plain">&gt;Tags:&lt;/</code><code class="html keyword">span</code><code class="html plain">&gt;@Helpers.Tags(Html, Model.Tags)</code></div><div class="line number24 index23 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html comments">&lt;!--Posted date--&gt;</code></div><div class="line number27 index26 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"posted-date"</code><code class="html plain">&gt;</code></div><div class="line number28 index27 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">@Model.PostedOn.ToConfigLocalTime()</code></div><div class="line number29 index28 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html comments">&lt;!--Short Description--&gt;</code></div><div class="line number36 index35 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post-body"</code><code class="html plain">&gt;</code></div><div class="line number37 index36 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">@Html.Raw(Model.ShortDescription)</code></div><div class="line number38 index37 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number39 index38 alt2">&nbsp;</div><div class="line number40 index39 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post-foot"</code><code class="html plain">&gt;</code></div><div class="line number41 index40 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">@Html.ActionLink("continue...", "post", "blog", </code></div><div class="line number42 index41 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">new </code></div><div class="line number43 index42 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">{ </code></div><div class="line number44 index43 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">year = Model.PostedOn.Year, </code></div><div class="line number45 index44 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">month = Model.PostedOn.Month, </code></div><div class="line number46 index45 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">day = Model.PostedOn.Day, </code></div><div class="line number47 index46 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">title = Model.UrlSlug </code></div><div class="line number48 index47 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">}, </code></div><div class="line number49 index48 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">new { title = "continue..." }</code></div><div class="line number50 index49 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">)</code></div><div class="line number51 index50 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number52 index51 alt1"><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 29. _PostTemplate.cshtml
</p>

<p>
  We want to display the post heading, category and tags as hyperlinks. It would be better if we create custom html helpers for generating the links.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_partialview.png" title="Links">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_posttemplate.png" class="post-diagram" alt="Links">
  </a>
  <p class="post-img-caption">Links</p>
</div>

<p>
  We have used three custom html helpers (<span class="span-highlight-text">@Html.PostLink</span>, <span class="span-highlight-text">@Html.CategoryLink</span> and <span class="span-highlight-text">@Helper.Tags</span>) that generate anchor tags from the <span class="span-highlight-text">Post</span>, <span class="span-highlight-text">Category</span> and <span class="span-highlight-text">Tags</span>. We could create a custom html helper both by declarative and through code. Code html helpers are better when the generated html is simple but in complex cases it's better to go for declarative helpers. The post heading and category links are simple and so we have used code-based html-helpers but in case of tags it's little complicated and so we have used a declarative one.
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">Custom Html-Helpers</span>
	<p style="margin-top: 7px;">
	  We can create a custom html-helper by creating an extension method for HtmlHelper class. The HtmlHelper is available as property Html in views.
	</p>
  </div>
</div>

<p>
  First create the html-helpers for post heading, category and tag (single) links. Create a new class file <span class="span-highlight-text">ActionLinkExtensions</span> in the root of the MVC project.
</p>

<div><div id="highlighter_755274" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">JustBlog.Core.Objects;</code></div><div class="line number2 index1 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">System;</code></div><div class="line number3 index2 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">System.Web.Mvc;</code></div><div class="line number4 index3 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">System.Web.Mvc.Html;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog</code></div><div class="line number7 index6 alt2"><code class="csharp plain">{</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">static</code> <code class="csharp keyword">class</code> <code class="csharp plain">ActionLinkExtensions</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">static</code> <code class="csharp plain">MvcHtmlString PostLink(</code><code class="csharp keyword">this</code> <code class="csharp plain">HtmlHelper helper, Post post)</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">helper.ActionLink(post.Title, </code><code class="csharp string">"Post"</code><code class="csharp plain">, </code><code class="csharp string">"Blog"</code><code class="csharp plain">, </code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{ </code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">year = post.PostedOn.Year, </code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">month = post.PostedOn.Month, </code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">title = post.UrlSlug </code></div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}, </code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{ </code></div><div class="line number19 index18 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">title = post.Title </code></div><div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">});</code></div><div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">static</code> <code class="csharp plain">MvcHtmlString CategoryLink(</code><code class="csharp keyword">this</code> <code class="csharp plain">HtmlHelper helper, </code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Category category)</code></div><div class="line number25 index24 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number26 index25 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">helper.ActionLink(category.Name, </code><code class="csharp string">"Category"</code><code class="csharp plain">, </code><code class="csharp string">"Blog"</code><code class="csharp plain">, </code></div><div class="line number27 index26 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{ </code></div><div class="line number28 index27 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">category = category.UrlSlug </code></div><div class="line number29 index28 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}, </code></div><div class="line number30 index29 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{ </code></div><div class="line number31 index30 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">title = String.Format(</code><code class="csharp string">"See all posts in {0}"</code><code class="csharp plain">, category.Name) </code></div><div class="line number32 index31 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">});</code></div><div class="line number33 index32 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number34 index33 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number35 index34 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">static</code> <code class="csharp plain">MvcHtmlString TagLink(</code><code class="csharp keyword">this</code> <code class="csharp plain">HtmlHelper helper, Tag tag)</code></div><div class="line number36 index35 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number37 index36 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">helper.ActionLink(tag.Name, </code><code class="csharp string">"Tag"</code><code class="csharp plain">, </code><code class="csharp string">"Blog"</code><code class="csharp plain">, </code><code class="csharp keyword">new</code> <code class="csharp plain">{ tag = tag.UrlSlug }, </code></div><div class="line number38 index37 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{ </code></div><div class="line number39 index38 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">title = String.Format(</code><code class="csharp string">"See all posts in {0}"</code><code class="csharp plain">, tag.Name) </code></div><div class="line number40 index39 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">});</code></div><div class="line number41 index40 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number42 index41 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number43 index42 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 30. ActionLinkExtensions
</p>

<p>
  Our custom html-helpers uses the built-in <span class="span-highlight-text">ActionLink</span> helper method to creates the link. Alternatively, we can construct the anchor tag inside the code using the built-in <span class="span-highlight-text">TagHelper</span> class as well. The built-in <span class="span-highlight-text">ActionLink</span> helper has many overloaded versions and the one that we have used takes 5 arguments which are described below.
</p>

<div><div id="highlighter_212664" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">return</code> <code class="csharp plain">helper.ActionLink</code></div><div class="line number2 index1 alt1"><code class="csharp plain">(</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">post.Title,&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="csharp comments">// anchor text</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Post"</code><code class="csharp plain">,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="csharp comments">// action name</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Blog"</code><code class="csharp plain">,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="csharp comments">// controller name</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="csharp comments">// route parameters</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">year = post.PostedOn.Year, </code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">month = post.PostedOn.Month, </code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">title = post.UrlSlug </code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}, </code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="csharp comments">// html attributes</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">title = post.Title </code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number14 index13 alt1"><code class="csharp plain">);</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 31. Custom ActionLink Helper
</p>

<p>
  We will see about the route parameters when we define routes for our action. Both the route parameters and html attributes are passed as anonymous objects.
</p>

<p>
  To use the custom extension methods in views we have to specify the namespace (<span class="span-highlight-text">JustBlog</span>) where they exists either in views using the <span class="span-highlight-text">@using</span> statement or in the web.config file located in the <span class="span-highlight-text">Views</span> folder. By the later approach we can access the extension method throughout all the views.
</p>

<div><div id="highlighter_178630" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">system.web.webPages.razor</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">host</code> <code class="xml color1">factoryType</code><code class="xml plain">=</code><code class="xml string">"System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"</code> <code class="xml plain">/&gt;</code></div><div class="line number3 index2 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">pages</code> <code class="xml color1">pageBaseType</code><code class="xml plain">=</code><code class="xml string">"System.Web.Mvc.WebViewPage"</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">namespaces</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">add</code> <code class="xml color1">namespace</code><code class="xml plain">=</code><code class="xml string">"System.Web.Mvc"</code> <code class="xml plain">/&gt;</code></div><div class="line number6 index5 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">add</code> <code class="xml color1">namespace</code><code class="xml plain">=</code><code class="xml string">"System.Web.Mvc.Ajax"</code> <code class="xml plain">/&gt;</code></div><div class="line number7 index6 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">add</code> <code class="xml color1">namespace</code><code class="xml plain">=</code><code class="xml string">"System.Web.Mvc.Html"</code> <code class="xml plain">/&gt;</code></div><div class="line number8 index7 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">add</code> <code class="xml color1">namespace</code><code class="xml plain">=</code><code class="xml string">"System.Web.Routing"</code> <code class="xml plain">/&gt;</code></div><div class="line number9 index8 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">add</code> <code class="xml color1">namespace</code><code class="xml plain">=</code><code class="xml string">"JustBlog"</code><code class="xml plain">/&gt;</code></div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">namespaces</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">pages</code><code class="xml plain">&gt;</code></div><div class="line number12 index11 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">system.web.webPages.razor</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 32. Specifying the namespace in View's web.config
</p>

<p>
  For reusable declarative html helpers we have to create a <span class="span-highlight-text">cshtml</span> file in the <span class="span-highlight-text">App_Code</span> folder. Let's create a <span class="span-highlight-text">cshtml</span> file with name <span class="span-highlight-text">Helpers.cshtml</span> under the <span class="span-highlight-text">App_Code</span> folder. The important thing to keep in mind is for <span class="span-highlight-text">cshtml</span> files located other than <span class="span-highlight-text">Views</span> folder the <span class="span-highlight-text">Html</span> and other properties of <span class="span-highlight-text">View</span> are not available, so we have to pass the <span class="span-highlight-text">HtmlHelper</span> as an argument to the helper methods.
</p>

<div><div id="highlighter_971318" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">@helper Tags(System.Web.Mvc.HtmlHelper htmlHelper, </code></div><div class="line number2 index1 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">IList&lt;</code><code class="html keyword">JustBlog.Core.Objects.Tag</code><code class="html plain">&gt; tags)</code></div><div class="line number3 index2 alt2"><code class="html plain">{</code></div><div class="line number4 index3 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">foreach (var tag in tags)</code></div><div class="line number5 index4 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">{</code></div><div class="line number6 index5 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"tags-div"</code><code class="html plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">@JustBlog.ActionLinkExtensions.TagLink(htmlHelper, tag)</code></div><div class="line number8 index7 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number9 index8 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">}</code></div><div class="line number10 index9 alt1"><code class="html plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 33. Helpers.cshtml
</p>

<p>
  We can call the <span class="span-highlight-text">Tags</span> method from any view by <span class="span-highlight-text">[file-name].[method-name]</span> i.e. <span class="span-highlight-text">Helpers.Tags(args)</span>.
</p>

<p>
  All the datetimes in the database are going to be stored in the UTC (Coordinated Universal Time) timezone (which we will see in the <a class="external-ref-link" target="_blank" href="http://prideparrot.com/blog/archive/2013/3/how_to_create_simple_blog_part2">Part II</a>). The advantage of storing datetimes in UTC timezone is, we can easily convert the dates to a particular timezone. To know more details about this, refer this <a class="external-ref-link" rel="nofollow" target="_blank" href="http://www.4guysfromrolla.com/articles/081507-1.aspx">article</a>. When the datetimes are read from the database we have to convert them to a particular timezone (which will be specified in the configuration) before displaying to the user.
</p>

<p>
  Let's create a class called <span class="span-highlight-text">Extensions</span> which contains an extension method <span class="span-highlight-text">ToConfigLocalTime</span> that converts the datetimes in UTC timezone to the timezone specified in the configuration.
</p>

<div><div id="highlighter_860960" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">JustBlog.Core.Objects;</code></div><div class="line number2 index1 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">System;</code></div><div class="line number3 index2 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">System.Configuration;</code></div><div class="line number4 index3 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">System.Web.Mvc;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog</code></div><div class="line number7 index6 alt2"><code class="csharp plain">{</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">static</code> <code class="csharp keyword">class</code> <code class="csharp plain">Extensions</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">static</code> <code class="csharp keyword">string</code> <code class="csharp plain">ToConfigLocalTime(</code><code class="csharp keyword">this</code> <code class="csharp plain">DateTime utcDT)</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var istTZ = TimeZoneInfo.FindSystemTimeZoneById(ConfigurationManager.AppSettings[</code><code class="csharp string">"Timezone"</code><code class="csharp plain">]);</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">String.Format(</code><code class="csharp string">"{0} ({1})"</code><code class="csharp plain">, TimeZoneInfo.ConvertTimeFromUtc(utcDT, istTZ).ToShortDateString(), ConfigurationManager.AppSettings[</code><code class="csharp string">"TimezoneAbbr"</code><code class="csharp plain">]);</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number16 index15 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 34. ToConfigLocalTime method
</p>

<p>
  For example, to display all the datetimes in "Indian Standard Time", we have to specify the following values in the configuration. Click <a class="external-ref-link" rel="nofollow" target="_blank" href="http://en.wikipedia.org/wiki/List_of_time_zone_abbreviations">here</a> to know the list of other timezones.
</p>

<div><div id="highlighter_349047" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">add</code> <code class="xml color1">key</code><code class="xml plain">=</code><code class="xml string">"Timezone"</code> <code class="xml color1">value</code><code class="xml plain">=</code><code class="xml string">"Indian Standard Time"</code> <code class="xml plain">/&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">add</code> <code class="xml color1">key</code><code class="xml plain">=</code><code class="xml string">"TimezoneAbbr"</code> <code class="xml color1">value</code><code class="xml plain">=</code><code class="xml string">"IST"</code> <code class="xml plain">/&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 35. Timezone configuration values
</p>


<p>
  Now where-ever we are displaying datetimes we have to call the extension method <span class="span-highlight-text">ToConfigLocalTime</span> on the datetime object.
</p>

<div><div id="highlighter_335685" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html comments">&lt;!--Posted date--&gt;</code></div><div class="line number2 index1 alt1"><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"posted-date"</code><code class="html plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">@Model.PostedOn.ToConfigLocalTime()</code></div><div class="line number4 index3 alt1"><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 36. Displaying the posted date
</p>

<p>
  Being our partial view (<span class="span-highlight-text">_PostTemplate</span>) is ready, we can complete our <span class="span-highlight-text">List</span> view. In the <span class="span-highlight-text">List</span> view all we have to do is iterate the posts collection and render each post using the <span class="span-highlight-text">_PostTemplate</span> partial view.
</p>

<div><div id="highlighter_943257" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">@model JustBlog.Models.ListViewModel</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"content"</code><code class="html plain">&gt;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">h1</code><code class="html plain">&gt;@ViewBag.Title&lt;/</code><code class="html keyword">h1</code><code class="html plain">&gt;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">@if (Model.Posts.Count &gt; 0)</code></div><div class="line number8 index7 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">{</code></div><div class="line number9 index8 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">foreach (var post in Model.Posts)</code></div><div class="line number10 index9 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">{</code></div><div class="line number11 index10 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">@Html.Partial("_PostTemplate", post)</code></div><div class="line number12 index11 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">}</code></div><div class="line number13 index12 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">}</code></div><div class="line number14 index13 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">else</code></div><div class="line number15 index14 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">{</code></div><div class="line number16 index15 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">p</code><code class="html plain">&gt;No posts found!&lt;/</code><code class="html keyword">p</code><code class="html plain">&gt;</code></div><div class="line number17 index16 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">}</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 37. List.cshtml
</p>

<p>
  Note that we have called the partial view <span class="span-highlight-text">_PostTemplate</span> using the <span class="span-highlight-text">Html.Partial</span> method, alternatively we can also use <span class="span-highlight-text">Html.RenderPartial</span>.
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">Html.Partial and Html.RenderPartial</span>
	<p style="margin-top: 7px;">
	  We can call a partial view using two ways, using Html.Partial or Html.RenderPartial. When we use the Html.RenderPartial the generated html is directly written to the output response which is efficient in large html cases.
	</p>
  </div>
</div>

<p>
  Our view is pretty much completed. We have some pagination and routing work pending to complete this story.
</p>

<h4 id="story1-pagination">4.7.4 Pagination</h4>

<p>
  We are displaying only the latest 10 posts and not all. To see the older posts we need to implement pagination. Let's display the pagination links (next and previous) at both the top and bottom of the page, this is also a best case where we can go for a partial view.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_navlinks.png" title="Pagination Links">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_navlinks.png" class="post-diagram" alt="Pagination Links">
  </a>
  <p class="post-img-caption">Pagination Links</p>
</div>

<p>
  Create a partial view <span class="span-highlight-text">_Pager.cshtml</span> under the <span class="span-highlight-text">Shared</span> folder. What we have to do in the pager partial view is display the previous and next pagination links based on the "total pages" and the "current page"	values.
</p>

<p>
  Here is the complete code and explaination follows the code.
</p>

<div><div id="highlighter_147685" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">@model JustBlog.Models.ListViewModel</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="html plain">@* Read the current page and total pages *@</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="html plain">@{</code></div><div class="line number6 index5 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">var currentPage = ViewContext.RequestContext.HttpContext.Request["p"] != null </code></div><div class="line number7 index6 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">? int.Parse(ViewContext.RequestContext.HttpContext.Request["p"]) </code></div><div class="line number8 index7 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">: 1;</code></div><div class="line number9 index8 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number10 index9 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">var totalPages = Math.Ceiling((double)Model.TotalPosts / 10);&nbsp; </code></div><div class="line number11 index10 alt2"><code class="html plain">}</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="html plain">@* Check do we need to display pagination links *@</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="html plain">@if (currentPage &gt; 1 || currentPage &lt; </code><code class="html keyword">totalPages</code><code class="html plain">)</code></div><div class="line number16 index15 alt1"><code class="html plain">{</code></div><div class="line number17 index16 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">var </code><code class="html color1">p</code> <code class="html plain">= </code><code class="html string">string</code><code class="html plain">.Format("p={0}", currentPage - 1);</code></div><div class="line number18 index17 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">var </code><code class="html color1">n</code> <code class="html plain">= </code><code class="html string">string</code><code class="html plain">.Format("p={0}", currentPage + 1);</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">@* If the view is rendered for "search" action append the pagination value with "&amp;" *@</code></div><div class="line number21 index20 alt2"><code class="html spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number22 index21 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">if (ViewContext.RouteData.Values["action"].ToString()</code></div><div class="line number23 index22 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">.Equals("search", StringComparison.OrdinalIgnoreCase))</code></div><div class="line number24 index23 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">{</code></div><div class="line number25 index24 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">var </code><code class="html color1">s</code> <code class="html plain">= </code><code class="html string">String</code><code class="html plain">.Format("?s={0}", ViewContext.RequestContext.HttpContext.Request.QueryString["s"]);</code></div><div class="line number26 index25 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html color1">p</code> <code class="html plain">= </code><code class="html string">String</code><code class="html plain">.Format("{0}&amp;{1}", s, p);</code></div><div class="line number27 index26 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html color1">n</code> <code class="html plain">= </code><code class="html string">String</code><code class="html plain">.Format("{0}&amp;{1}", s, n);</code></div><div class="line number28 index27 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">}</code></div><div class="line number29 index28 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">else</code></div><div class="line number30 index29 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">{</code></div><div class="line number31 index30 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html color1">p</code> <code class="html plain">= </code><code class="html string">String</code><code class="html plain">.Concat("?", p);</code></div><div class="line number32 index31 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html color1">n</code> <code class="html plain">= </code><code class="html string">String</code><code class="html plain">.Concat("?", n);</code></div><div class="line number33 index32 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">}</code></div><div class="line number34 index33 alt1"><code class="html spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number35 index34 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html comments">&lt;!--pagination links--&gt;</code></div><div class="line number36 index35 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"pager"</code><code class="html plain">&gt;</code></div><div class="line number37 index36 alt2"><code class="html spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number38 index37 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">a</code> <code class="html color1">href</code><code class="html plain">=</code><code class="html string">"@p"</code> <code class="html color1">title</code><code class="html plain">=</code><code class="html string">"Previous"</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"previous"</code></div><div class="line number39 index38 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">style="visibility:@(currentPage &gt; 1 ? "visible" : "collapse")"&gt;&lt;&lt; </code><code class="html keyword">previous</code><code class="html plain">&lt;/a&gt;</code></div><div class="line number40 index39 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number41 index40 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">a</code> <code class="html color1">href</code><code class="html plain">=</code><code class="html string">"@n"</code> <code class="html color1">title</code><code class="html plain">=</code><code class="html string">"Next"</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"next"</code></div><div class="line number42 index41 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html color1">style</code><code class="html plain">=</code><code class="html string">"visibility:@(currentPage &lt; totalPages ? "</code><code class="html plain">visible" : "collapse")"&gt;next &gt;&gt;&lt;/</code><code class="html keyword">a</code><code class="html plain">&gt;</code></div><div class="line number43 index42 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number44 index43 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number45 index44 alt2"><code class="html plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 38. _Pager.cshtml
</p>

<p>
  We have to know the total pages and the current page no. to show/hide the pagination links. The former one is directly available through the <span class="span-highlight-text">TotalPosts</span> property of the <span class="span-highlight-text">ListViewModel</span> and the later one can be read from query-string.
</p>

<p>
  In the conditional block what we are doing is determining the next and previous page no. that will be specified as query-strings in the anchor links. In the search posts (we will be doing this story shortly) there will be already a query-string in the url and so we have to append our pagination value <span class="span-highlight-text">p</span> with "&amp;" which is taken care in the inner condition.
</p>

<p>
  Update the <span class="span-highlight-text">List.cshtml</span> to display the pagination links at both the top and bottom of the page.
</p>

<div><div id="highlighter_720246" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">@model JustBlog.Models.ListViewModel</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"content"</code><code class="html plain">&gt;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">h1</code><code class="html plain">&gt;@ViewBag.Title&lt;/</code><code class="html keyword">h1</code><code class="html plain">&gt;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">@Html.Partial("_Pager", Model)</code></div><div class="line number8 index7 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">@if (Model.Posts.Count &gt; 0)</code></div><div class="line number10 index9 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">{</code></div><div class="line number11 index10 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">foreach (var post in Model.Posts)</code></div><div class="line number12 index11 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">{</code></div><div class="line number13 index12 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">@Html.Partial("_PostTemplate", post)</code></div><div class="line number14 index13 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">}</code></div><div class="line number15 index14 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">}</code></div><div class="line number16 index15 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">else</code></div><div class="line number17 index16 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">{</code></div><div class="line number18 index17 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">p</code><code class="html plain">&gt;No posts found!&lt;/</code><code class="html keyword">p</code><code class="html plain">&gt;</code></div><div class="line number19 index18 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">}</code></div><div class="line number20 index19 alt1"><code class="html spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number21 index20 alt2"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">@Html.Partial("_Pager", Model)</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 39. List.cshtml
</p>

<p>
  Our <span class="span-highlight-text">List</span> view is completed. Before doing a test drive we have to fix the routes in the <span class="span-highlight-text">RouteConfig.cs</span> under <span class="span-highlight-text">App_Start</span> folder.
</p>

<h4 id="story1-fixing-routes">4.7.5 Fixing Routes</h4>

<p>
  Routes are defined in the <span class="span-highlight-text">RouteConfig.cs</span> file located in <span class="span-highlight-text">App_Start</span> folder and they are used to map the incoming requests to controller actions. All the routes defined in an application are registered in the <span class="span-highlight-text">RouteTable</span>. You will see an ignore route and map route definitions defined as default in the <span class="span-highlight-text">RegisterRoutes</span> method. This <span class="span-highlight-text">RegisterRoutes</span> method is called in the <span class="span-highlight-text">Application_Start</span> event of <span class="span-highlight-text">Global.asax.cs</span>.
</p>

<div><div id="highlighter_84667" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">System.Web.Mvc;</code></div><div class="line number2 index1 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">System.Web.Routing;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog</code></div><div class="line number5 index4 alt2"><code class="csharp plain">{</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">static</code> <code class="csharp keyword">void</code> <code class="csharp plain">RegisterRoutes(RouteCollection routes)</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">routes.IgnoreRoute(</code><code class="csharp string">"{resource}.axd/{*pathInfo}"</code><code class="csharp plain">);</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">routes.MapRoute(</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Default"</code><code class="csharp plain">,</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"{controller}/{action}/{id}"</code><code class="csharp plain">,</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{ controller = </code><code class="csharp string">"Home"</code><code class="csharp plain">, action = </code><code class="csharp string">"Index"</code><code class="csharp plain">, id = UrlParameter.Optional }</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">);</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number16 index15 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 40. RouteConfig.cs
</p>

<p>
  The <span class="span-highlight-text">IgnoreRoute</span> extension method is used to ignore the requests (return 404) to be handled by routing infrastructure if they matches the pattern. In the above case, all the ".axd" requests are not handled by the routing module.
</p>

<p>
  The <span class="span-highlight-text">MapRoute</span> method is used to map an incoming request to a controller and action. The first parameter <span class="span-highlight-text">Default</span> we have passed in the above definition is an optional name for the route. The second parameter is the pattern and the final one is the default values for the route parameters. If there is not a controller or an action segment available in the incoming request, they are taken from the default values.
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">Url pattern in routes</span>
	<p style="margin-top: 7px;">
	  The pattern we specify while defining routes matches to the segments of the incoming url. The pattern approach helps us to avoid defining a separate route for each action.<br>
	  <br>
	  For example, if the incoming request is "http://mysite.com/Admin/Index" and on matching this request with the default route ("{controller}/{action}/{id}") excluding the host name the first segment "Admin" is mapped to the controller, "Index" is mapped to the action and "id" is not mapped to anything (it is optional). So if there is a controller with name "AdminController" and if it has an action with name "Index" the request is forwarded to that action else 404 is returned.	
	</p>
  </div>
</div>

<p>
  We have to change the default controller and action names specified in the default route to <span class="span-highlight-text">Blog</span> and <span class="span-highlight-text">Posts</span> as below,
</p>

<div><div id="highlighter_115561" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp keyword">static</code> <code class="csharp keyword">void</code> <code class="csharp plain">RegisterRoutes(RouteCollection routes)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">routes.IgnoreRoute(</code><code class="csharp string">"{resource}.axd/{*pathInfo}"</code><code class="csharp plain">);</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">routes.MapRoute(</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Default"</code><code class="csharp plain">,</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"{controller}/{action}/{id}"</code><code class="csharp plain">,</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{ controller = </code><code class="csharp string">"Blog"</code><code class="csharp plain">, action = </code><code class="csharp string">"Posts"</code><code class="csharp plain">, id = UrlParameter.Optional }</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">);</code></div><div class="line number10 index9 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 41. RouteConfig.cs
</p>

<p>
  Before running the application we have to create a database with name <span class="span-highlight-text">JustBlog</span> and specify the connection string in the web.config.
</p>

<div><div id="highlighter_556647" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">connectionStrings</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">add</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"JustBlogDbConnString"</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">connectionString</code><code class="xml plain">=</code><code class="xml string">"Data Source=SQLSERVER;Initial Catalog=JustBlog;Integrated Security=True"</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">providerName</code><code class="xml plain">=</code><code class="xml string">"System.Data.SqlClient"</code><code class="xml plain">/&gt;</code></div><div class="line number5 index4 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">cconnectionStrings</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 42. Specifying connection string in web.config
</p>

<p>
  You've to replace the <span class="span-highlight-text">Data Source</span> property based upon your SQL Server configuration. The tables are created automatically by NHibernate when you run the application. You could download the script that inserts some dummy data to the tables from <a class="external-ref-link" target="_blank" href="https://github.com/VJAI/JustBlog/tree/master/sql/justblog_sample_data.sql">here</a>.
</p>

<p style="font-weight: bold;">
  One important thing you have to do is, comment out the below line in the <span class="span-highlight-text">RepositoryModule</span> class in the <span class="span-highlight-text">JustBlog.Core</span> project once the tables are created successfully. This helps to avoid recreating tables again in subsequent requests. You can also create tables manually by running this <a class="external-ref-link" target="_blank" href="https://github.com/VJAI/JustBlog/blob/master/sql/JustBlog.sql">script</a>.
</p>

<div><div id="highlighter_526366" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">ExposeConfiguration(cfg =&gt; </code><code class="csharp keyword">new</code> <code class="csharp plain">SchemaExport(cfg).Execute(</code><code class="csharp keyword">true</code><code class="csharp plain">, </code><code class="csharp keyword">true</code><code class="csharp plain">, </code><code class="csharp keyword">false</code><code class="csharp plain">))</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 43. RepositoryModule
</p>

<p>
  If everything is perfect you'll see the below screen.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_firstdrive.png" title="Test Drive">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_firstdrive.png" class="post-diagram" alt="Test Drive">
  </a>
  <p class="post-img-caption">Test Drive</p>
</div>

<p>
  In our blog application we are not going to have much controllers. We have a <span class="span-highlight-text">BlogController</span> and we will have one more called <span class="span-highlight-text">AdminController</span> in the <a class="external-ref-link" target="_blank" href="http://prideparrot.com/blog/archive/2013/3/how_to_create_simple_blog_part2">next part</a>. So having two controllers in the application we can ignore the controller name specified in the url pattern. Instead of <span class="span-highlight-text">http://localhost/blog/posts</span> we can simply use <span class="span-highlight-text">http://localhost/posts</span>. To achieve this all we have to do is replace the default route defined in the <span class="span-highlight-text">RegisterRoutes</span> method with the below route definition. Note that, the action links we have used in the views will generate the links correctly according to the changes in the routes. That's why I recommend always to use the built-in helper method to generate the links instead of hardcoding them directly in the <span class="span-highlight-text">href</span> attribute.
</p>

<div><div id="highlighter_183992" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">routes.MapRoute(</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Action"</code><code class="csharp plain">,</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"{action}"</code><code class="csharp plain">,</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{ controller = </code><code class="csharp string">"Blog"</code><code class="csharp plain">, action = </code><code class="csharp string">"Posts"</code> <code class="csharp plain">}</code></div><div class="line number5 index4 alt2"><code class="csharp plain">);</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 44. Default route
</p>

<p>
  That's all! We have completed our first story. Now we can see the latest posts in our blog and navigate to the older posts as well.
</p>

<h2 id="story2">5. Story #2 - Display posts based on category</h2>

<p>
  Each post belongs to a category and in this story we are going to display the posts based on category.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_story2.png">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_story2.png" class="post-diagram">
  </a>
</div>

<p>
  To complete this story we have to complete the following tasks.
</p>

<p>
  1. Create repository methods to fetch posts, total posts and category based on slug<br>
  2. Create an action that return posts belongs to a category 
  <br>
  3. Define a new route in <span class="span-highlight-text">RouteConfig.cs</span> file
</p>

<h3 id="story2-create-repo-methods">5.1 Create repository methods to fetch posts, total posts and category based on slug</h3>

<p>
  Let's define three new methods in the <span class="span-highlight-text">IBlogRepository</span> interface.
</p>

<div><div id="highlighter_204780" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp keyword">interface</code> <code class="csharp plain">IBlogRepository</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">...</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">IList&lt;Post&gt; PostsForCategory(</code><code class="csharp keyword">string</code> <code class="csharp plain">categorySlug, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageNo, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageSize);</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">int</code> <code class="csharp plain">TotalPostsForCategory(</code><code class="csharp keyword">string</code> <code class="csharp plain">categorySlug); </code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Category Category(</code><code class="csharp keyword">string</code> <code class="csharp plain">categorySlug);</code></div><div class="line number8 index7 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 45. IBlogRepository
</p>

<p>
  <span class="span-highlight-text">PostsForCategory</span> method returns the latest posts belongs to a category based on the slug (<span class="span-highlight-text">UrlSlug</span>) and pagination values. The <span class="span-highlight-text">TotalPostsForCategory</span> method returns the total no. of posts belongs to the category. The <span class="span-highlight-text">Category</span> method returns the category instance.
</p>

<p>
  Here is the implementation of the methods.
</p>

<div><div id="highlighter_867415" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Post&gt; PostsForCategory(</code><code class="csharp keyword">string</code> <code class="csharp plain">categorySlug, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageNo, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageSize)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">var posts = _session.Query&lt;Post&gt;()</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Where(p =&gt; p.Published &amp;&amp; p.Category.UrlSlug.Equals(categorySlug))</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.OrderByDescending(p =&gt; p.PostedOn)</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Skip(pageNo * pageSize)</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Take(pageSize)</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Fetch(p =&gt; p.Category)</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.ToList();</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">var postIds = posts.Select(p =&gt; p.Id).ToList();</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">_session.Query&lt;Post&gt;()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Where(p =&gt; postIds.Contains(p.Id))</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.OrderByDescending(p =&gt; p.PostedOn)</code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.FetchMany(p =&gt; p.Tags)</code></div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.ToList();</code></div><div class="line number18 index17 alt1"><code class="csharp plain">}</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="csharp keyword">public</code> <code class="csharp keyword">int</code> <code class="csharp plain">TotalPostsForCategory(</code><code class="csharp keyword">string</code> <code class="csharp plain">categorySlug)</code></div><div class="line number21 index20 alt2"><code class="csharp plain">{</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">_session.Query&lt;Post&gt;()</code></div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Where(p =&gt; p.Published &amp;&amp; p.Category.UrlSlug.Equals(categorySlug))</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Count();</code></div><div class="line number25 index24 alt2"><code class="csharp plain">}</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">Category Category(</code><code class="csharp keyword">string</code> <code class="csharp plain">categorySlug)</code></div><div class="line number28 index27 alt1"><code class="csharp plain">{</code></div><div class="line number29 index28 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">_session.Query&lt;Category&gt;()</code></div><div class="line number30 index29 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.FirstOrDefault(t =&gt; t.UrlSlug.Equals(categorySlug));</code></div><div class="line number31 index30 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 46. BlogRepository
</p>

<h3 id="story2-create-action">5.2 Create an action to return posts belongs a particular category</h3>

<p>
  We need a new action in our <span class="span-highlight-text">BlogController</span> to diplay the posts based on category. Create a new action with the name <span class="span-highlight-text">Category</span> that takes both the slug parameter and pagination values.
</p>

<div><div id="highlighter_77816" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">ViewResult Category(</code><code class="csharp keyword">string</code> <code class="csharp plain">category, </code><code class="csharp keyword">int</code> <code class="csharp plain">p = 1)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">// TODO: get the posts for the category and return the view.</code></div><div class="line number4 index3 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 47. Category action
</p>

<p>
  We can use the same <span class="span-highlight-text">ListViewModel</span> by adding an overloaded constructor that takes category slug as a parameter. Here is the modified <span class="span-highlight-text">ListViewModel</span>. We also added a new property called <span class="span-highlight-text">Category</span> to store the object.
</p>

<div><div id="highlighter_964680" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">ListViewModel</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">ListViewModel(IBlogRepository blogRepository, </code><code class="csharp keyword">int</code> <code class="csharp plain">p)</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Posts = blogRepository.Posts(p - 1, 10);</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">TotalPosts = blogRepository.TotalPosts();</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">} </code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">ListViewModel(IBlogRepository blogRepository, </code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">string</code> <code class="csharp plain">categorySlug, </code><code class="csharp keyword">int</code> <code class="csharp plain">p)</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Posts = blogRepository.PostsForCategory(categorySlug, p - 1, 10);</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">TotalPosts = blogRepository.TotalPostsForCategory(categorySlug);</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Category = blogRepository.Category(categorySlug);</code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Post&gt; Posts { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number19 index18 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">int</code> <code class="csharp plain">TotalPosts { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">Category Category { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class="line number21 index20 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 48. ListViewModel
</p>

<p>
  Our viewmodel is ready, let's complete the pending work in the action.
</p>

<div><div id="highlighter_544469" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">ViewResult Category(</code><code class="csharp keyword">string</code> <code class="csharp plain">category, </code><code class="csharp keyword">int</code> <code class="csharp plain">p = 1)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var viewModel = </code><code class="csharp keyword">new</code> <code class="csharp plain">ListViewModel(_blogRepository, category, p);</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">if</code> <code class="csharp plain">(viewModel.Category == </code><code class="csharp keyword">null</code><code class="csharp plain">)</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">throw</code> <code class="csharp keyword">new</code> <code class="csharp plain">HttpException(404, </code><code class="csharp string">"Category not found"</code><code class="csharp plain">);</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">ViewBag.Title = String.Format(</code><code class="csharp string">@"Latest posts on category ""{0}"""</code><code class="csharp plain">, </code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">viewModel.Category.Name);</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">View(</code><code class="csharp string">"List"</code><code class="csharp plain">, viewModel);</code></div><div class="line number11 index10 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 49. Category action
</p>

<p>
  Sometimes user can look for posts belongs to a category that not exists and in that case the <span class="span-highlight-text">Category</span> property will be null. We are throwing a 404 exception if there is no category exists in database for the passed slug. We will see in Part III how to handle these exceptions at application level and display a custom error view to the user.
</p>

<h3 id="story2-create-routeconfig">5.3 Define a new route in RouteConfig.cs file</h3>

<p>
  We need to map requests like <span class="span-highlight-text">http://localhost/category/programming</span>, <span class="span-highlight-text">http://localhost/category/unittesting</span> to <span class="span-highlight-text">Category</span> action. The default route we have currently not supports this rule. Let's define a new route above the default one that maps these requests to the <span class="span-highlight-text">Category</span> action.
</p>

<div><div id="highlighter_261683" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">routes.MapRoute(</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Category"</code><code class="csharp plain">,</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Category/{category}"</code><code class="csharp plain">,</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{ controller = </code><code class="csharp string">"Blog"</code><code class="csharp plain">, action = </code><code class="csharp string">"Category"</code> <code class="csharp plain">}</code></div><div class="line number5 index4 alt2"><code class="csharp plain">);</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 50. New route for Category action
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">Route Order</span>
	<p style="margin-top: 7px;">
	  The route that defined at first has the highest priority. If the incoming request not matches the first route then it is matched with the second, third and so on until it matches any of the defined route. If none of the route matches then 404 error will be returned.
	</p>
  </div>
</div>

<p>
  Our second story is over, now we can browse posts based on category. In the next story we will see how to display posts labelled for a tag.
</p>

<h2 id="story3">6. Story #3 - Display posts based on tag</h2>

<p>
  This story is similar as the previous one and in this story we are going to display posts labelled for a particular tag.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_story2.png">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_story3.png" class="post-diagram">
  </a>
</div>

<p>
  The following are the tasks we are going to do.
</p>

<p>
  1. Create repository methods to fetch posts, total posts and tag based on slug<br>
  2. Create an action to return posts for a particular tag
  <br>
  3. Define a new route in <span class="span-highlight-text">RouteConfig.cs</span> file
</p>

<h3 id="story3-create-repo-methods">6.1 Create repository methods to fetch posts, total posts and tag based on slug</h3>

<p>
  We have to define three new methods in <span class="span-highlight-text">IBlogRepository</span>.
</p>

<div><div id="highlighter_702059" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp keyword">interface</code> <code class="csharp plain">IBlogRepository</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">...</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">IList&lt;Post&gt; PostsForTag(</code><code class="csharp keyword">string</code> <code class="csharp plain">tagSlug, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageNo, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageSize);</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">int</code> <code class="csharp plain">TotalPostsForTag(</code><code class="csharp keyword">string</code> <code class="csharp plain">tagSlug);</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Tag Tag(</code><code class="csharp keyword">string</code> <code class="csharp plain">tagSlug);</code></div><div class="line number8 index7 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 51. IBlogRepository
</p>

<p>
  Here is the implementation of those methods.
</p>

<div><div id="highlighter_758417" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Post&gt; PostsForTag(</code><code class="csharp keyword">string</code> <code class="csharp plain">tagSlug, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageNo, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageSize)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">var posts = _session.Query&lt;Post&gt;()</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Where(p =&gt; p.Published &amp;&amp; p.Tags.Any(t =&gt; t.UrlSlug.Equals(tagSlug)))</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.OrderByDescending(p =&gt; p.PostedOn)</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Skip(pageNo * pageSize)</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Take(pageSize)</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Fetch(p =&gt; p.Category)</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.ToList();</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">var postIds = posts.Select(p =&gt; p.Id).ToList();</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">_session.Query&lt;Post&gt;()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Where(p =&gt; postIds.Contains(p.Id))</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.OrderByDescending(p =&gt; p.PostedOn)</code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.FetchMany(p =&gt; p.Tags)</code></div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.ToList();</code></div><div class="line number18 index17 alt1"><code class="csharp plain">}</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="csharp keyword">public</code> <code class="csharp keyword">int</code> <code class="csharp plain">TotalPostsForTag(</code><code class="csharp keyword">string</code> <code class="csharp plain">tagSlug)</code></div><div class="line number21 index20 alt2"><code class="csharp plain">{</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">_session.Query&lt;Post&gt;()</code></div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Where(p =&gt; p.Published &amp;&amp; p.Tags.Any(t =&gt; t.UrlSlug.Equals(tagSlug)))</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Count();</code></div><div class="line number25 index24 alt2"><code class="csharp plain">}</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">Tag Tag(</code><code class="csharp keyword">string</code> <code class="csharp plain">tagSlug)</code></div><div class="line number28 index27 alt1"><code class="csharp plain">{</code></div><div class="line number29 index28 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">_session.Query&lt;Tag&gt;()</code></div><div class="line number30 index29 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.FirstOrDefault(t =&gt; t.UrlSlug.Equals(tagSlug));</code></div><div class="line number31 index30 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 52. BlogRepository
</p>

<h3 id="story3-create-action">6.2 Create an action to return posts for a particular tag</h3>

<p>
  We have to create a new action <span class="span-highlight-text">Tag</span> to display posts labelled for a tag.
</p>

<div><div id="highlighter_577684" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">ViewResult Tag(</code><code class="csharp keyword">string</code> <code class="csharp plain">tag, </code><code class="csharp keyword">int</code> <code class="csharp plain">p = 1)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">// TODO: get the posts for the tag and return the view.</code></div><div class="line number4 index3 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 53. Tag action
</p>

<p>
  We have to modify the overloaded constructor of the <span class="span-highlight-text">ListViewModel</span> as below to use it in the <span class="span-highlight-text">Tag</span> action.
</p>

<div><div id="highlighter_203703" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">ListViewModel</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">ListViewModel(IBlogRepository blogRepository, </code><code class="csharp keyword">int</code> <code class="csharp plain">p)</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Posts = blogRepository.Posts(p - 1, 10);</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">TotalPosts = blogRepository.TotalPosts();</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">} </code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">ListViewModel(IBlogRepository blogRepository, </code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">string</code> <code class="csharp plain">text, </code><code class="csharp keyword">string</code> <code class="csharp plain">type, </code><code class="csharp keyword">int</code> <code class="csharp plain">p)</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">switch</code> <code class="csharp plain">(type)</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">case</code> <code class="csharp string">"Tag"</code><code class="csharp plain">:</code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Posts = blogRepository.PostsForTag(text, p - 1, 10);</code></div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">TotalPosts = blogRepository.TotalPostsForTag(text);</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Tag = blogRepository.Tag(text);</code></div><div class="line number19 index18 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">break</code><code class="csharp plain">;</code></div><div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">default</code><code class="csharp plain">:</code></div><div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Posts = blogRepository.PostsForCategory(text, p - 1, 10);</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">TotalPosts = blogRepository.TotalPostsForCategory(text);</code></div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Category = blogRepository.Category(text);</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">break</code><code class="csharp plain">;</code></div><div class="line number25 index24 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number26 index25 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Post&gt; Posts { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number29 index28 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">int</code> <code class="csharp plain">TotalPosts { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number30 index29 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">Category Category { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number31 index30 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">Tag Tag { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number32 index31 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 54. ListViewModel
</p>


<p>
  We have modified the constructor to pass additional parameter <span class="span-highlight-text">type</span> that represents to fetch posts based on category or tag. We also added a new property <span class="span-highlight-text">Tag</span>.
</p>

<p>
  Here is the implementation of the <span class="span-highlight-text">Tag</span> action. We are passing the type as "Tag" to fetch the posts tagged for the corresponsing tag.
</p>

<div><div id="highlighter_180680" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">ViewResult Tag(</code><code class="csharp keyword">string</code> <code class="csharp plain">tag, </code><code class="csharp keyword">int</code> <code class="csharp plain">p = 1)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var viewModel = </code><code class="csharp keyword">new</code> <code class="csharp plain">ListViewModel(_blogRepository, tag, </code><code class="csharp string">"Tag"</code><code class="csharp plain">, p);</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">if</code> <code class="csharp plain">(viewModel.Tag == </code><code class="csharp keyword">null</code><code class="csharp plain">)</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">throw</code> <code class="csharp keyword">new</code> <code class="csharp plain">HttpException(404, </code><code class="csharp string">"Tag not found"</code><code class="csharp plain">);</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">ViewBag.Title = String.Format(</code><code class="csharp string">@"Latest posts tagged on ""{0}"""</code><code class="csharp plain">, </code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">viewModel.Tag.Name);</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">View(</code><code class="csharp string">"List"</code><code class="csharp plain">, viewModel);</code></div><div class="line number11 index10 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 55. Tag action
</p>

<p>
  Since we have changed the constructor of the <span class="span-highlight-text">ListViewModel</span>, we need to update the <span class="span-highlight-text">Category</span> action to pass the <span class="span-highlight-text">type</span> as "Category".
</p>

<div><div id="highlighter_610041" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">ViewResult Category(</code><code class="csharp keyword">string</code> <code class="csharp plain">category, </code><code class="csharp keyword">int</code> <code class="csharp plain">p = 1)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var viewModel = </code><code class="csharp keyword">new</code> <code class="csharp plain">ListViewModel(_blogRepository, category, </code><code class="csharp string">"Category"</code><code class="csharp plain">, p);</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">if</code> <code class="csharp plain">(viewModel.Category == </code><code class="csharp keyword">null</code><code class="csharp plain">)</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">throw</code> <code class="csharp keyword">new</code> <code class="csharp plain">HttpException(404, </code><code class="csharp string">"Category not found"</code><code class="csharp plain">);</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">ViewBag.Title = String.Format(</code><code class="csharp string">@"Latest posts on category ""{0}"""</code><code class="csharp plain">, </code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">viewModel.Category.Name);</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">View(</code><code class="csharp string">"List"</code><code class="csharp plain">, viewModel);</code></div><div class="line number11 index10 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 56. Category action
</p>

<h3 id="story3-create-new-route">6.3 Define a new route in RouteConfig.cs file</h3>

<p>
  Like in previous story, we need to add another route to direct requests to <span class="span-highlight-text">Tag</span> action.
</p>

<div><div id="highlighter_149184" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">routes.MapRoute(</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Tag"</code><code class="csharp plain">,</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Tag/{tag}"</code><code class="csharp plain">,</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{ controller = </code><code class="csharp string">"Blog"</code><code class="csharp plain">, action = </code><code class="csharp string">"Tag"</code> <code class="csharp plain">}</code></div><div class="line number5 index4 alt2"><code class="csharp plain">);</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 57. Tag route
</p>

<p>
  We have completed this story as well. In the next story we will see how to search posts.
</p>

<h2 id="story4">7. Story #4 - Search posts</h2>

<p>
  In this story, we are going to implement the search functionality for our blog.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_story4.png">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_story4.png" class="post-diagram">
  </a>
</div>

<p>
  The following are the tasks we are going to execute as part of this story.
</p>

<p>
  1. Create a partial view to display the search textbox<br>
  2. Create necessary repository methods
  <br>
  3. Create search action
</p>

<h3 id="story4-create-partial-view">7.1 Create a partial view to display the search textbox</h3>

<p>
  Create a new partial view with name <span class="span-highlight-text">_Search.cshml</span> under the <span class="span-highlight-text">Shared</span> folder. We have to create a html form and that can be easily accomplished by the <span class="span-highlight-text">Html.BeginForm()</span> html-helper.
</p>

<div><div id="highlighter_952085" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">@</code><code class="csharp keyword">using</code> <code class="csharp plain">(Html.BeginForm(</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Search"</code><code class="csharp plain">,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="csharp comments">// action</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Blog"</code><code class="csharp plain">,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="csharp comments">// controller</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">FormMethod.Get,&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="csharp comments">// method</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{ id = </code><code class="csharp string">"search-form"</code> <code class="csharp plain">})) </code><code class="csharp comments">// html attributes</code></div><div class="line number6 index5 alt1"><code class="csharp plain">{</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;p&gt;</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">@Html.TextBox(</code><code class="csharp string">"s"</code><code class="csharp plain">)</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;/p&gt;</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;p&gt;</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;input type=</code><code class="csharp string">"submit"</code> <code class="csharp plain">value=</code><code class="csharp string">"Search"</code><code class="csharp plain">&gt;</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;/p&gt;</code></div><div class="line number13 index12 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 58. Search form
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">Html.BeginForm</span>
	<p style="margin-top: 7px;">
	  This is a special html-helper that renders a html form. The helper implements IDisposable to make sure that the form end tag is closed after rendering the child controls.
	</p>
  </div>
</div>

<p>
  We want to display the search form in all the pages and so let's update the <span class="span-highlight-text">_Layout.cshtml</span> to include the <span class="span-highlight-text">_Search.cshtml</span> partial view above the <span class="span-highlight-text">RenderBody</span>. 
</p>

<div><div id="highlighter_255863" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">...</code></div><div class="line number2 index1 alt1"><code class="csharp plain">&lt;div id=</code><code class="csharp string">"site_content"</code><code class="csharp plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">@Html.Partial(</code><code class="csharp string">"_Search"</code><code class="csharp plain">)</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">@RenderBody()</code></div><div class="line number5 index4 alt2"><code class="csharp plain">&lt;/div&gt;</code></div><div class="line number6 index5 alt1"><code class="csharp plain">...</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 59. _Layout.cshtml
</p>

<h3 id="story4-create-repo-methods">7.2 Create necessary repository methods</h3>

<p>
  We have to create two methods, one method to fetch the posts that matches the search text and the other one is to display the total number of posts matches the search text for pagination.
</p>

<div><div id="highlighter_583820" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp keyword">interface</code> <code class="csharp plain">IBlogRepository</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">...</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">IList&lt;Post&gt; PostsForSearch(</code><code class="csharp keyword">string</code> <code class="csharp plain">search, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageNo, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageSize);</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">int</code> <code class="csharp plain">TotalPostsForSearch(</code><code class="csharp keyword">string</code> <code class="csharp plain">search);</code></div><div class="line number6 index5 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 60. IBlogRepository
</p>

<p>
  Here is the implementation of both the methods.
</p>

<div><div id="highlighter_150769" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Post&gt; PostsForSearch(</code><code class="csharp keyword">string</code> <code class="csharp plain">search, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageNo, </code><code class="csharp keyword">int</code> <code class="csharp plain">pageSize)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">var posts = _session.Query&lt;Post&gt;()</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Where(p =&gt; p.Published &amp;&amp; (p.Title.Contains(search) || p.Category.Name.Equals(search) || p.Tags.Any(t =&gt; t.Name.Equals(search))))</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.OrderByDescending(p =&gt; p.PostedOn)</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Skip(pageNo * pageSize)</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Take(pageSize)</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Fetch(p =&gt; p.Category)</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.ToList();</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">var postIds = posts.Select(p =&gt; p.Id).ToList();</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">_session.Query&lt;Post&gt;()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Where(p =&gt; postIds.Contains(p.Id))</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.OrderByDescending(p =&gt; p.PostedOn)</code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.FetchMany(p =&gt; p.Tags)</code></div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.ToList();</code></div><div class="line number18 index17 alt1"><code class="csharp plain">}</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="csharp keyword">public</code> <code class="csharp keyword">int</code> <code class="csharp plain">TotalPostsForSearch(</code><code class="csharp keyword">string</code> <code class="csharp plain">search)</code></div><div class="line number21 index20 alt2"><code class="csharp plain">{</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">_session.Query&lt;Post&gt;()</code></div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Where(p =&gt; p.Published &amp;&amp; (p.Title.Contains(search) || p.Category.Name.Equals(search) || p.Tags.Any(t =&gt; t.Name.Equals(search))))</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Count();</code></div><div class="line number25 index24 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 61. BlogRepository
</p>

<p>
  If you see the implementation of <span class="span-highlight-text">PostsForSearch</span> method, we are searching the posts that matches the text either in title, category or tags.
</p>

<h3 id="story4-create-action">7.3 Create search action</h3>

<p>
  We need an action that displays the posts matches the search text and it's pretty much the same as the <span class="span-highlight-text">Category</span> and <span class="span-highlight-text">Tag</span> actions.
</p>

<div><div id="highlighter_942457" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">ViewResult Search(</code><code class="csharp keyword">string</code> <code class="csharp plain">s, </code><code class="csharp keyword">int</code> <code class="csharp plain">p = 1)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">ViewBag.Title = String.Format(</code><code class="csharp string">@"Lists of posts found </code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">for search text ""{0}"""</code><code class="csharp plain">, s);</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var viewModel = </code><code class="csharp keyword">new</code> <code class="csharp plain">ListViewModel(_blogRepository, s, </code><code class="csharp string">"Search"</code><code class="csharp plain">, p);</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">View(</code><code class="csharp string">"List"</code><code class="csharp plain">, viewModel);</code></div><div class="line number8 index7 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 62. Search action
</p>

<p>
  Let's update the <span class="span-highlight-text">ListViewModel</span>.
</p>

<div><div id="highlighter_318464" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">ListViewModel</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">ListViewModel(IBlogRepository blogRepository, </code><code class="csharp keyword">int</code> <code class="csharp plain">p)</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Posts = blogRepository.Posts(p - 1, 10);</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">TotalPosts = blogRepository.TotalPosts();</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">} </code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">ListViewModel(IBlogRepository blogRepository, </code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">string</code> <code class="csharp plain">text, </code><code class="csharp keyword">string</code> <code class="csharp plain">type, </code><code class="csharp keyword">int</code> <code class="csharp plain">p)</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">switch</code> <code class="csharp plain">(type)</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">case</code> <code class="csharp string">"Category"</code><code class="csharp plain">:</code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Posts = blogRepository.PostsForCategory(text, p - 1, 10);</code></div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">TotalPosts = blogRepository.TotalPostsForCategory(text);</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Category = blogRepository.Category(text);</code></div><div class="line number19 index18 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">break</code><code class="csharp plain">;</code></div><div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">case</code> <code class="csharp string">"Tag"</code><code class="csharp plain">:</code></div><div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Posts = blogRepository.PostsForTag(text, p - 1, 10);</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">TotalPosts = blogRepository.TotalPostsForTag(text);</code></div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Tag = blogRepository.Tag(text);</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">break</code><code class="csharp plain">;</code></div><div class="line number25 index24 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">default</code><code class="csharp plain">:</code></div><div class="line number26 index25 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Posts = blogRepository.PostsForSearch(text, p - 1, 10);</code></div><div class="line number27 index26 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">TotalPosts = blogRepository.TotalPostsForSearch(text);</code></div><div class="line number28 index27 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Search = text;</code></div><div class="line number29 index28 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">break</code><code class="csharp plain">;</code></div><div class="line number30 index29 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number31 index30 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Post&gt; Posts { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number34 index33 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">int</code> <code class="csharp plain">TotalPosts { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number35 index34 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">Category Category { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number36 index35 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">Tag Tag { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number37 index36 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">string</code> <code class="csharp plain">Search { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number38 index37 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 63. ListViewModel
</p>

<p>
  We have added a new property <span class="span-highlight-text">Search</span> in the <span class="span-highlight-text">ListViewModel</span> to store the search text and display it in the view.
</p>

<p>
  We don't want the form getting submitted on clicking the <span class="span-highlight-text">Search</span> button without entering any text in the search-box and we can achieve that through a simple script. Create a folder with name <span class="span-highlight-text">Scripts</span>. Add a script file <span class="span-highlight-text">app.js</span> under the folder. All we have to do in the script file is listen to the <span class="span-highlight-text">submit</span> event of the form and stop the event if there is no any text in the search-box.
</p>

<div><div id="highlighter_316581" class="syntaxhighlighter  js"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="js plain">$(</code><code class="js keyword">function</code> <code class="js plain">() {</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="js plain">$(</code><code class="js string">'#search-form'</code><code class="js plain">).submit(</code><code class="js keyword">function</code> <code class="js plain">() {</code></div><div class="line number4 index3 alt1"><code class="js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="js keyword">if</code> <code class="js plain">($(</code><code class="js string">"#s"</code><code class="js plain">).val().trim())</code></div><div class="line number5 index4 alt2"><code class="js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="js keyword">return</code> <code class="js keyword">true</code><code class="js plain">;</code></div><div class="line number6 index5 alt1"><code class="js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="js keyword">return</code> <code class="js keyword">false</code><code class="js plain">;</code></div><div class="line number7 index6 alt2"><code class="js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="js plain">});</code></div><div class="line number8 index7 alt1"><code class="js plain">});</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 64. app.js
</p>

<p>
  Don't forget to include the script file <span class="span-highlight-text">app.js</span> in the <span class="span-highlight-text">_Layout.cshtml</span> page along with the jquery library.
</p>

<div><div id="highlighter_847270" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">&lt;</code><code class="html keyword">script</code> <code class="html color1">src</code><code class="html plain">=</code><code class="html string">"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.2.min.js"</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">script</code><code class="html plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="html plain">&lt;</code><code class="html keyword">script</code> <code class="html color1">src</code><code class="html plain">=</code><code class="html string">"@Url.Content("</code><code class="html plain">~/Scripts/app.js")"&gt;&lt;/</code><code class="html keyword">script</code><code class="html plain">&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 65. Referencing scripts in _Layout.cshtml
</p>

<h2 id="story5">8. Story #5 - Display the details of a single post</h2>

<p>
  The stories we have completed so far are about displaying collection of posts based upon category, tag or search text. In this story we will see how to display the details of a single post.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_story5.png">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_story5.png" class="post-diagram">
  </a>
</div>

<p>
  Following are the tasks we are going to execute as part of this story.
</p>

<p>
  1. Create a repository method to return post based upon year, month and url-slug<br>
  2. Create an action to return the post view
  <br>
  3. Create view
  <br>
  4. Define a new route in <span class="span-highlight-text">RouteConfig.cs</span>
</p>

<h3 id="story5-create-repo-methods">8.1 Create a repository method to return post based upon year, month and url-slug</h3>

<p>
  Each post is uniquely identified by the title slug (<span class="span-highlight-text">UrlSlug</span>) along with the year and month the post is published. Define a new method in <span class="span-highlight-text">IBlogRepository</span> that returns a post based upon those three parameters.
</p>

<div><div id="highlighter_61506" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp keyword">interface</code> <code class="csharp plain">IBlogRepository</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">...</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Post Post(</code><code class="csharp keyword">int</code> <code class="csharp plain">year, </code><code class="csharp keyword">int</code> <code class="csharp plain">month, </code><code class="csharp keyword">string</code> <code class="csharp plain">titleSlug);</code></div><div class="line number6 index5 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 66. IBlogRepository
</p>

<p>
  Implement the <span class="span-highlight-text">Post</span> method in <span class="span-highlight-text">BlogRepository</span>.
</p>

<div><div id="highlighter_896369" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">Post Post(</code><code class="csharp keyword">int</code> <code class="csharp plain">year, </code><code class="csharp keyword">int</code> <code class="csharp plain">month, </code><code class="csharp keyword">string</code> <code class="csharp plain">titleSlug)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var query = _session.Query&lt;Post&gt;()</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Where(p =&gt; p.PostedOn.Year == year &amp;&amp; p.PostedOn.Month == month &amp;&amp; p.UrlSlug.Equals(titleSlug))</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">.Fetch(p =&gt; p.Category);</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">query.FetchMany(p =&gt; p.Tags).ToFuture();</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">query.ToFuture().Single();</code></div><div class="line number10 index9 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 67. BlogRepository
</p>

<h3 id="story5-create-action">8.2 Create an action to return the post view</h3>

<p>
  Create a new action with the name <span class="span-highlight-text">Post</span> that takes year, month and title (<span class="span-highlight-text">UrlSlug</span>)
</p>

<div><div id="highlighter_245543" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">ViewResult Post(</code><code class="csharp keyword">int</code> <code class="csharp plain">year, </code><code class="csharp keyword">int</code> <code class="csharp plain">month, </code><code class="csharp keyword">string</code> <code class="csharp plain">title)</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var post = _blogRepository.Post(year, month, title);</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">if</code> <code class="csharp plain">(post == </code><code class="csharp keyword">null</code><code class="csharp plain">)</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">throw</code> <code class="csharp keyword">new</code> <code class="csharp plain">HttpException(404, </code><code class="csharp string">"Post not found"</code><code class="csharp plain">);</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">if</code> <code class="csharp plain">(post.Published == </code><code class="csharp keyword">false</code> <code class="csharp plain">&amp;&amp; User.Identity.IsAuthenticated == </code><code class="csharp keyword">false</code><code class="csharp plain">)</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">throw</code> <code class="csharp keyword">new</code> <code class="csharp plain">HttpException(401, </code><code class="csharp string">"The post is not published"</code><code class="csharp plain">);</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">View(post);</code></div><div class="line number12 index11 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 68. Post action
</p>

<p>
  If the post is not published and the user is not admin then we are throwing 401 exception. Admin needs to see the post eventhough it's not published.
</p>

<h3 id="story5-create-view">8.3 Create view</h3>

<p>
  We need a separate view for the <span class="span-highlight-text">Post</span> action with the same name. We could have used the partial view <span class="span-highlight-text">_PostTemplate</span> but there are some differences in the html and so I decided to keep things separate.
</p>

<div><div id="highlighter_804549" class="syntaxhighlighter  html"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="html plain">@model JustBlog.Core.Objects.Post</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="html plain">@{</code></div><div class="line number4 index3 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">ViewBag.Title = Model.Title;</code></div><div class="line number5 index4 alt2"><code class="html plain">}</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"content"</code><code class="html plain">&gt;</code></div><div class="line number8 index7 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post"</code><code class="html plain">&gt;</code></div><div class="line number9 index8 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post-meta"</code><code class="html plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"row"</code><code class="html plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number12 index11 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post-title"</code><code class="html plain">&gt;</code></div><div class="line number13 index12 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">h1</code><code class="html plain">&gt;@Html.PostLink(Model)&lt;/</code><code class="html keyword">h1</code><code class="html plain">&gt;</code></div><div class="line number14 index13 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number15 index14 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number17 index16 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"row"</code><code class="html plain">&gt;</code></div><div class="line number18 index17 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number19 index18 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post-category"</code><code class="html plain">&gt;</code></div><div class="line number20 index19 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">span</code><code class="html plain">&gt;Category:&lt;/</code><code class="html keyword">span</code><code class="html plain">&gt;&nbsp;@Html.CategoryLink(Model.Category)</code></div><div class="line number21 index20 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number22 index21 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number23 index22 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post-tags"</code><code class="html plain">&gt;</code></div><div class="line number24 index23 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">span</code><code class="html plain">&gt;Tags:&lt;/</code><code class="html keyword">span</code><code class="html plain">&gt;&nbsp;@Helpers.Tags(Html, Model.Tags)</code></div><div class="line number25 index24 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number26 index25 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number27 index26 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"posted-date"</code><code class="html plain">&gt;</code></div><div class="line number28 index27 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">@Model.PostedOn.ToConfigLocalTime()</code></div><div class="line number29 index28 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number30 index29 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number31 index30 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number32 index31 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number33 index32 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number34 index33 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"post-body"</code><code class="html plain">&gt;</code></div><div class="line number35 index34 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">@Html.Raw(Model.Description)</code></div><div class="line number36 index35 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number37 index36 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number38 index37 alt1"><code class="html spaces">&nbsp;&nbsp;</code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div><div class="line number39 index38 alt2"><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 69. Post view
</p>

<h3 id="story5-create-route">8.4 Define a new route in RouteConfig.cs</h3>

<p>
  The url for a post looks like <span class="span-highlight-text">http://localhost/archive/2012/11/some_post</span>. We have three variable segments (<span class="span-highlight-text">year</span>, <span class="span-highlight-text">month</span> and <span class="span-highlight-text">title</span>) in the request. Let's define a new route to handle these requests.
</p>

<div><div id="highlighter_334900" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">routes.MapRoute(</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Post"</code><code class="csharp plain">,</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"Archive/{year}/{month}/{title}"</code><code class="csharp plain">,</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">{ controller = </code><code class="csharp string">"Blog"</code><code class="csharp plain">, action = </code><code class="csharp string">"Post"</code> <code class="csharp plain">}</code></div><div class="line number5 index4 alt2"><code class="csharp plain">);</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 70. Post route
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">MVC Tip - Route Constraints</span>
	<p style="margin-top: 7px;">
	  Route Constraints are used to constraint a route matching a request.
	</p>
	<p style="margin-top: 7px;">
	  Ex.
	  <br>
	  routes.MapRoute(
	  <br>
	  &nbsp;&nbsp;&nbsp;&nbsp;"Post", 
	  <br>
	  &nbsp;&nbsp;&nbsp;&nbsp;"Archive/Post/{year}-{month}-{day}",
	  <br>
	  &nbsp;&nbsp;&nbsp;&nbsp;new { controller = "Blog", action = "Post" },
	  <br>
	  &nbsp;&nbsp;&nbsp;&nbsp;new { year = @"\d{4}", month = @"\d{2}", day = @"\d{2}" }
	  <br>
	  );
	</p>
	<p>
	  The anonymous object we have passed as last parameter contains the route constraints set for the parameters in the route. There are different types of constraints and the ones we have used above are regular expression constraints. If the parameters in the incoming request doesn't matches the regular expression they fails by 404. 
	</p>
  </div>
</div>

<p>
  In the upcoming stories, we will see how to display the sidebar widgets using a specific feature of <span class="span-highlight-text">ASP.NET MVC</span> called <span class="span-highlight-text">Child action</span>. 
</p>

<h2 id="story6">9. Story #6 - Display the post categories in a widget</h2>

<p>
  We have to display a set of widgets as a sidebar in our blog. In this story we are going to create the categories widget that displays all the categories in the blog. In the following stories we will see how to build other widgets to display tags and latest posts.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_story6.png">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/simpleblog_story6.png" class="post-diagram">
  </a>
</div>

<p>
  The following are the tasks we have to execute to complete this story.
</p>

<p>
  1. Create a repository method that returns all the categories
  <br>
  2. Create a view model
  <br>
  3. Create a child action
  <br>
  4. Create necessary partial views
</p>

<h3 id="story6-create-repo-methods">9.1 Create a repository method that returns all the categories</h3>

<p>
  Define and implement the method <span class="span-highlight-text">Categories</span> that returns all the categories from database.
</p>

<div><div id="highlighter_850238" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp keyword">interface</code> <code class="csharp plain">IBlogRepository</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">...</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">IList&lt;Category&gt; Categories();</code></div><div class="line number5 index4 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 71. IBlogRepository
</p>

<p>
  The implementation is quite simple,
</p>

<div><div id="highlighter_437259" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Category&gt; Categories()</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">_session.Query&lt;Category&gt;().OrderBy(p =&gt; p.Name).ToList();</code></div><div class="line number4 index3 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 72. BlogRepository
</p>

<h3 id="story6-create-view-model">9.2 Create a view model</h3>

<p>
  We are going to display the complete sidebar through a single action. We need a new single view model that wraps all the widget data. Let's create a new view model called <span class="span-highlight-text">WidgetViewModel</span> under the <span class="span-highlight-text">Models</span> folder.
</p>

<div><div id="highlighter_213382" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">JustBlog.Core;</code></div><div class="line number2 index1 alt1"><code class="csharp keyword">using</code> <code class="csharp plain">JustBlog.Core.Objects;</code></div><div class="line number3 index2 alt2"><code class="csharp keyword">using</code> <code class="csharp plain">System.Collections.Generic;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="csharp keyword">namespace</code> <code class="csharp plain">JustBlog.Models</code></div><div class="line number6 index5 alt1"><code class="csharp plain">{</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">WidgetViewModel</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">WidgetViewModel(IBlogRepository blogRepository)</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Categories = blogRepository.Categories();</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Category&gt; Categories { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number16 index15 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 73. WidgetViewModel
</p>

<p>
  Currently our <span class="span-highlight-text">WidgetViewModel</span> contains only property <span class="span-highlight-text">Categories</span> of type <span class="span-highlight-text">IList&lt;Category&gt;</span>, soon we are going to add other widgets data as well.
</p>

<h3 id="story6-create-child-action">9.3 Create a child action</h3>

<p>
  A child action is an action that could be called from a view and they cannot be called directly from the browser. We can make a normal action as child action by marking it with the <span class="span-highlight-text">ChildActionOnly</span> attribute.
</p>

<div><div id="highlighter_194672" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">[ChildActionOnly]</code></div><div class="line number2 index1 alt1"><code class="csharp keyword">public</code> <code class="csharp plain">PartialViewResult Sidebars()</code></div><div class="line number3 index2 alt2"><code class="csharp plain">{</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">var widgetViewModel = </code><code class="csharp keyword">new</code> <code class="csharp plain">WidgetViewModel(_blogRepository);</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">PartialView(</code><code class="csharp string">"_Sidebars"</code><code class="csharp plain">, widgetViewModel);</code></div><div class="line number6 index5 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 74. Sidebars child action
</p>

<p>
  Since we are returning a partial view, the return type of the action is specified as <span class="span-highlight-text">PartialViewResult</span>.
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">Child Actions</span>
	<p style="margin-top: 10px;">
	  Child actions are special actions that can be only called from views. We can invoke a child action either using Html.Action or Html.RenderAction. It is imporatant to note that a separate MVC life cycle starts when we invoke a child action. We can also pass model instances to a child action.
	</p>
  </div>
</div>

<h3 id="story6-create-partial-view">9.4 Create necessary partial views</h3>

<p>
  Create two partials <span class="span-highlight-text">_Sidebars</span> and <span class="span-highlight-text">_Categories</span> under the <span class="span-highlight-text">Shared</span> folder. The <span class="span-highlight-text">_Sidebars</span> calls the <span class="span-highlight-text">_Categories</span> and the other partial views passing the appropriate model.
</p>

<div><div id="highlighter_294209" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">@model JustBlog.Models.WidgetViewModel</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="csharp plain">&lt;div id=</code><code class="csharp string">"sidebars"</code><code class="csharp plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">@Html.Partial(</code><code class="csharp string">"_Categories"</code><code class="csharp plain">, Model.Categories)</code></div><div class="line number5 index4 alt2"><code class="csharp plain">&lt;/div&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 75. _Sidebars.cshtml
</p>

<p>
  Here is the content of <span class="span-highlight-text">_Categories.cshtml</span>. Note that, our <span class="span-highlight-text">_Categories.cshtml</span> is strongly-typed with <span class="span-highlight-text">IList&lt;Category&gt;</span>. All we doing in the below markup is iterating the model and rendering it as an unordered list.
</p>

<div><div id="highlighter_56991" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">@model IList&lt;JustBlog.Core.Objects.Category&gt;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="csharp plain">&lt;div </code><code class="csharp keyword">class</code><code class="csharp plain">=</code><code class="csharp string">"sidebar"</code><code class="csharp plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">&lt;h3&gt;Categories&lt;/h3&gt;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">@</code><code class="csharp keyword">if</code> <code class="csharp plain">(Model.Count &gt; 0)</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;ul&gt;</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">@</code><code class="csharp keyword">foreach</code> <code class="csharp plain">(var category </code><code class="csharp keyword">in</code> <code class="csharp plain">Model)</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;li&gt;@Html.CategoryLink(category)&lt;/li&gt;</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;/ul&gt;</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp keyword">else</code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;p&gt;No categories found!&lt;/p&gt;</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number19 index18 alt2"><code class="csharp plain">&lt;/div&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 76. _Categories.cshtml
</p>

<p>
  Update the <span class="span-highlight-text">_Layout.cshtml</span> to call the child action <span class="span-highlight-text">Sidebars</span>.
</p>

<div><div id="highlighter_210306" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">...</code></div><div class="line number2 index1 alt1"><code class="csharp plain">&lt;div id=</code><code class="csharp string">"site_content"</code><code class="csharp plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">@Html.Partial(</code><code class="csharp string">"_Search"</code><code class="csharp plain">)</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">@RenderBody()</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">@* Call the child action to render the sidebar *@</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">@Html.Action(</code><code class="csharp string">"Sidebars"</code><code class="csharp plain">)</code></div><div class="line number8 index7 alt1"><code class="csharp plain">&lt;/div&gt;</code></div><div class="line number9 index8 alt2"><code class="csharp plain">...</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 77. _Layout.cshtml
</p>

<p>
  If you run the application you could see the Categories widget at the sidebar.
</p>

<div style="text-align: center;" class="image-wrapper">
  <a target="_blank" href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/categories-widget.png">
	<img src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/categories-widget.png" class="post-diagram">
  </a>
</div>

<p>
  Let's complete the other widgets.
</p>

<h2 id="story7">10. Story #7 - Display the post tags in a widget</h2>

<p>
  This story is quite same as the previous one.
</p>

<p>
  1. Create a repository method that returns all the tags
  <br>
  2. Update the <span class="span-highlight-text">WidgetViewModel</span>
  <br>
  3. Create a partial view to display the tags
</p>

<h3 id="story7-create-repo-methods">10.1 Create a repository method that returns all the tags</h3>

<div><div id="highlighter_766227" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp keyword">interface</code> <code class="csharp plain">IBlogRepository</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">...</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">IList&lt;Tag&gt; Tags();</code></div><div class="line number5 index4 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 78. IBlogRepository
</p>

<div><div id="highlighter_198386" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Tag&gt; Tags()</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">return</code> <code class="csharp plain">_session.Query&lt;Tag&gt;().OrderBy(p =&gt; p.Name).ToList();</code></div><div class="line number4 index3 alt1"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 79. BlogRepository
</p>

<h3 id="story7-create-view-model">10.2 Update the WidgetViewModel</h3>

<p>
  Add a new property <span class="span-highlight-text">Tags</span> to the <span class="span-highlight-text">WidgetViewModel</span> to store the collection of tags.
</p>

<div><div id="highlighter_202548" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp keyword">class</code> <code class="csharp plain">WidgetViewModel</code></div><div class="line number2 index1 alt1"><code class="csharp plain">{</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">WidgetViewModel(IBlogRepository blogRepository)</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Categories = blogRepository.Categories();</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">Tags = blogRepository.Tags();</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Category&gt; Categories { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">public</code> <code class="csharp plain">IList&lt;Tag&gt; Tags { </code><code class="csharp keyword">get</code><code class="csharp plain">; </code><code class="csharp keyword">private</code> <code class="csharp keyword">set</code><code class="csharp plain">; }</code></div><div class="line number11 index10 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 80. WidgetViewModel
</p>

<h3 id="story7-create-partial-view">10.3 Create a partial view to display the tags</h3>

<p>
  Create a partial view <span class="span-highlight-text">_Tags.cshtml</span> that is strongly-typed with <span class="span-highlight-text">IList&lt;Tag&gt;</span>.
</p>

<div><div id="highlighter_163137" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">@model IList&lt;JustBlog.Core.Objects.Tag&gt;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="csharp plain">&lt;div </code><code class="csharp keyword">class</code><code class="csharp plain">=</code><code class="csharp string">"tags sidebar"</code><code class="csharp plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">&lt;h3&gt;Tags&lt;/h3&gt;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">@</code><code class="csharp keyword">if</code> <code class="csharp plain">(Model.Count &gt; 0)</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">foreach</code> <code class="csharp plain">(var tag </code><code class="csharp keyword">in</code> <code class="csharp plain">Model)</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">@Html.TagLink(tag)</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp keyword">else</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;p&gt;No tags found!&lt;/p&gt;</code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number17 index16 alt2"><code class="csharp plain">&lt;/div&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 81. _Tags.cshtml
</p>

<p>
  We need to update the <span class="span-highlight-text">_Sidebars.cshtml</span> to render the tags as shown below.
</p>

<div><div id="highlighter_962284" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">@model JustBlog.Models.WidgetViewModel</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="csharp plain">&lt;div id=</code><code class="csharp string">"sidebars"</code><code class="csharp plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">@Html.Partial(</code><code class="csharp string">"_Categories"</code><code class="csharp plain">, Model.Categories)</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">@Html.Partial(</code><code class="csharp string">"_Tags"</code><code class="csharp plain">, Model.Tags)</code></div><div class="line number6 index5 alt1"><code class="csharp plain">&lt;/div&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 82. _Sidebars.cshtml
</p>

<div class="para-box1">
  <div class="para-content">
	<span style="font-weight: bold;">MVC Tip: Caching</span>
	<p style="margin-top: 10px;">
	  Outputs of actions can be cached by applying the [OutputCache] filter attribute over an action. MVC supports Donut-hole caching through child actions. In Donut-hole caching only a portion of the page is cached.
	</p>
  </div>
</div>

<h2 id="story8">11. Story #8 - Display the latest posts in a widget</h2>

<p>
  We already have the repository method that returns the latest posts. Now all we have to do is create a partial view to displays the posts. Create a partial view <span class="span-highlight-text">_LatestPosts.cshtml</span> with the below contents.
</p>

<div><div id="highlighter_792910" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">@model IList&lt;JustBlog.Core.Objects.Post&gt;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="csharp plain">&lt;div </code><code class="csharp keyword">class</code><code class="csharp plain">=</code><code class="csharp string">"sidebar"</code><code class="csharp plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">&lt;h3&gt;Latest Posts&lt;/h3&gt;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">@</code><code class="csharp keyword">if</code> <code class="csharp plain">(Model.Count &gt; 0)</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;ul&gt;</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">@</code><code class="csharp keyword">foreach</code> <code class="csharp plain">(var post </code><code class="csharp keyword">in</code> <code class="csharp plain">Model)</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;li&gt;@Html.PostLink(post)&lt;/li&gt;</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;/ul&gt;</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp keyword">else</code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">{</code></div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;p&gt;No posts found!&lt;/p&gt;</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number19 index18 alt2"><code class="csharp plain">&lt;/div&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 83. _LatestPosts.cshtml
</p>

<p>
  Update the <span class="span-highlight-text">_Sidebars.cshtml</span>.
</p>

<div><div id="highlighter_70983" class="syntaxhighlighter  csharp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">@model JustBlog.Models.WidgetViewModel</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="csharp plain">&lt;div id=</code><code class="csharp string">"sidebars"</code><code class="csharp plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">@Html.Partial(</code><code class="csharp string">"_Categories"</code><code class="csharp plain">, Model.Categories)</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">@Html.Partial(</code><code class="csharp string">"_Tags"</code><code class="csharp plain">, Model.Tags)</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">@Html.Partial(</code><code class="csharp string">"_LatestPosts"</code><code class="csharp plain">, Model.LatestPosts)</code></div><div class="line number7 index6 alt2"><code class="csharp plain">&lt;/div&gt;</code></div></div></td></tr></tbody></table></div></div>

<p class="listing">
  Listing 84. _Sidebars.cshtml
</p>


<h2 id="summary">12. Summary</h2>

<p>
  Great! We have completed all the stories of Part 1. Let's summarize the things that we have completed in this part. We have created the domain entities, database classes and other components that are part of the model layer. We have configured <span class="span-highlight-text">Fluent NHibernate</span> and <span class="span-highlight-text">NHibernate</span> for database interactions and <span class="span-highlight-text">Ninject</span> for dependency injection. We have completed the stories that displays posts based on category, tag. We implemented search functionality for our blog. We also completed the stories to display the details of a single post and the sidebar widgets.
</p>

<p>
  In the <a class="external-ref-link" target="_blank" href="http://prideparrot.com/blog/archive/2013/3/how_to_create_simple_blog_part2">next part</a>, we are going to build an admin console to manage the posts, categories and tags. We are going to learn some interesting things like how to implement forms authentication, how to write unit tests for controllers and much more.. Don't miss it!
</p>

<p>
  Your feedback and suggestions are very valuable to me, so please share a comment!
</p>

<p style="text-align: right;"><a class="source-code button" target="_blank" href="http://www.prideparrot.com/Source-Codes/JustBlog_SourceCode.zip" title="Download Source">Download Source</a>&nbsp;&nbsp;<a class="source-code button" target="_blank" href="https://github.com/VJAI/JustBlog" title="Fork in Github">Fork in Github</a></p>
			  </div>
			</article>
			<nav class="navigation nextprevposts" role="navigation">
			  <div class="nav-previous" style="visibility:visible"><a href="http://www.prideparrot.com/blog/archive/2012/10/asp_net_mvc_vs_webapi"><span class="meta-nav">←</span> ASP.NET MVC vs ASP.NET Web API</a></div>
			  <div class="nav-next" style="visibility:visible"><a href="http://www.prideparrot.com/blog/archive/2013/3/how_to_create_simple_blog_part2">How to create a simple blog using ASP.NET MVC - Part II <span class="meta-nav">→</span></a></div>
			</nav>
			  <div class="row-fluid">
				<div class="span12">
				  <h3>Related Posts</h3>
				  <ul>
					  <li><a href="http://www.prideparrot.com/blog/archive/2013/6/how_to_create_simple_blog_part3" title="How to create a simple blog using ASP.NET MVC - Part III">How to create a simple blog using ASP.NET MVC - Part III</a></li>
					  <li><a href="http://www.prideparrot.com/blog/archive/2013/3/how_to_create_simple_blog_part2" title="How to create a simple blog using ASP.NET MVC - Part II">How to create a simple blog using ASP.NET MVC - Part II</a></li>
					  <li><a href="http://www.prideparrot.com/blog/archive/2012/10/asp_net_mvc_vs_webapi" title="ASP.NET MVC vs ASP.NET Web API">ASP.NET MVC vs ASP.NET Web API</a></li>
					  <li><a href="http://www.prideparrot.com/blog/archive/2012/10/building_xml_based_routing_system_using_xrouter" title="Building XML based routing system using XRouter">Building XML based routing system using XRouter</a></li>
					  <li><a href="http://www.prideparrot.com/blog/archive/2012/10/renderpartial_vs__renderaction" title="RenderPartial vs. RenderAction">RenderPartial vs. RenderAction</a></li>
				  </ul>
				</div>
			  </div>
		 
<div id="disqus_thread"><iframe id="dsq-2" data-disqus-uid="2" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/saved_resource.htm" style="width: 100% !important; border: none !important; overflow: hidden !important; height: 9650px !important;" horizontalscrolling="no" verticalscrolling="no"></iframe></div>
<div class="separator">
</div>
<script type="text/javascript">
	/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
	var disqus_shortname = 'prideparrot'; // required: replace example with your forum shortname
	var disqus_identifier = '/blog/archive/2012/12/how_to_create_a_simple_blog_part1';
	var disqus_url = 'http://prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1';

	/* * * DON'T EDIT BELOW THIS LINE * * */
	(function () {
		var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = false;
		dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	})();
</script>
<noscript>
  Please enable JavaScript to view the &lt;a href="http://disqus.com/?ref_noscript"&gt;comments
	powered by Disqus.&lt;/a&gt;</noscript>

<script type="text/javascript">
	/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
	var disqus_shortname = 'prideparrot'; // required: replace example with your forum shortname

	/* * * DON'T EDIT BELOW THIS LINE * * */
	(function () {
		var s = document.createElement('script'); s.async = true;
		s.type = 'text/javascript';
		s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
		(document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
	}());
</script>
		</div>
	  </div>
	</div>
  </div>
</section>

<footer class="site-footer wrapper" role="contentinfo">
  <div class="row">
	<div id="supplementary" class="row-fluid">

	  <div class="bottom-bar row-fluid">
		<div class="span4">
		  <h3>Recent Posts</h3>
		  <ul class="icons icon-hand-right-list text-left">
			  <li><a href="http://www.prideparrot.com/blog/archive/2014/6/blog_template_using_bootstrap3_part2" title="How to create an awesome blog template using Bootstrap 3 - Part II">How to create an awesome blog template using Bootstrap 3 - Part II</a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2014/4/blog_template_using_twitter_bootstrap3_part1" title="How to create an awesome blog template using Bootstrap 3 - Part I">How to create an awesome blog template using Bootstrap 3 - Part I</a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2013/6/how_to_create_simple_blog_part3" title="How to create a simple blog using ASP.NET MVC - Part III">How to create a simple blog using ASP.NET MVC - Part III</a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2013/3/how_to_create_simple_blog_part2" title="How to create a simple blog using ASP.NET MVC - Part II">How to create a simple blog using ASP.NET MVC - Part II</a></li>
			  <li><a href="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/How to create a simple blog using ASP.NET MVC - Part I.htm" title="How to create a simple blog using ASP.NET MVC - Part I">How to create a simple blog using ASP.NET MVC - Part I</a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/10/asp_net_mvc_vs_webapi" title="ASP.NET MVC vs ASP.NET Web API">ASP.NET MVC vs ASP.NET Web API</a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/10/building_xml_based_routing_system_using_xrouter" title="Building XML based routing system using XRouter">Building XML based routing system using XRouter</a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/10/renderpartial_vs__renderaction" title="RenderPartial vs. RenderAction">RenderPartial vs. RenderAction</a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/9/creating_custom_modelvalidatorprovider" title="Creating a custom ModelValidatorProvider in ASP.NET MVC">Creating a custom ModelValidatorProvider in ASP.NET MVC</a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/9/simplifying_html_generation_using_razor_templates" title="Simplifying html generation in code using Razor templates">Simplifying html generation in code using Razor templates</a></li>
		  </ul>
		</div>
		<div class="span4">
		  <h3>Archive</h3>
		  <ul>
			  <li><a href="http://www.prideparrot.com/blog/archive/2014/6" title="1 post">June 2014 (1)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2014/4" title="1 post">April 2014 (1)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2013/6" title="1 post">June 2013 (1)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2013/3" title="1 post">March 2013 (1)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/12" title="1 post">December 2012 (1)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/10" title="3 posts">October 2012 (3)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/9" title="2 posts">September 2012 (2)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/8" title="2 posts">August 2012 (2)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/7" title="4 posts">July 2012 (4)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/6" title="6 posts">June 2012 (6)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/5" title="2 posts">May 2012 (2)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/4" title="3 posts">April 2012 (3)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/3" title="5 posts">March 2012 (5)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/2" title="2 posts">February 2012 (2)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2012/1" title="2 posts">January 2012 (2)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2011/12" title="1 post">December 2011 (1)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2011/11" title="1 post">November 2011 (1)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2011/10" title="2 posts">October 2011 (2)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2011/9" title="3 posts">September 2011 (3)
			  </a></li>
			  <li><a href="http://www.prideparrot.com/blog/archive/2011/8" title="1 post">August 2011 (1)
			  </a></li>
		  </ul>
		</div>
		<div class="span4">
		  <h3>Tags</h3>
		  <ul class="inline-list">
			  <li><a href="http://www.prideparrot.com/blog/tag/.NET" rel="0" title="">.NET</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/C%23" rel="0" title="">C#</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/ASP.NET" rel="1" title="1 post">ASP.NET</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/ASP.NET%20MVC" rel="30" title="30 posts">ASP.NET MVC</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/WCF" rel="3" title="3 posts">WCF</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/JavaScript" rel="0" title="">JavaScript</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/REST" rel="2" title="2 posts">REST</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/HTML" rel="1" title="1 post">HTML</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/CSS" rel="0" title="">CSS</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/Security" rel="2" title="2 posts">Security</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/SEO" rel="0" title="">SEO</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/jquery" rel="1" title="1 post">jquery</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/JSON" rel="1" title="1 post">JSON</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/timezone" rel="1" title="1 post">timezone</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/CORS" rel="1" title="1 post">CORS</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/cross-domain" rel="1" title="1 post">cross-domain</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/Access%20Control" rel="0" title="">Access Control</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/Rhino-Mocks" rel="1" title="1 post">Rhino-Mocks</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/unittesting" rel="1" title="1 post">unittesting</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/mocking" rel="1" title="1 post">mocking</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/NUnit" rel="1" title="1 post">NUnit</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/email" rel="1" title="1 post">email</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/NAnt" rel="1" title="1 post">NAnt</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/automation" rel="1" title="1 post">automation</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/windows%20services" rel="1" title="1 post">windows services</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/DI" rel="3" title="3 posts">DI</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/Castle%20Windsor" rel="1" title="1 post">Castle Windsor</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/ASP.NET%20Web%20API" rel="2" title="2 posts">ASP.NET Web API</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/xml" rel="0" title="">xml</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/xslt" rel="0" title="">xslt</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/routing" rel="5" title="5 posts">routing</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/CSRF" rel="1" title="1 post">CSRF</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/authorization" rel="2" title="2 posts">authorization</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/AJAX" rel="1" title="1 post">AJAX</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/exception" rel="1" title="1 post">exception</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/validation" rel="2" title="2 posts">validation</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/Ninject" rel="2" title="2 posts">Ninject</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/Razor" rel="1" title="1 post">Razor</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/HTTP" rel="2" title="2 posts">HTTP</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/design-patterns" rel="0" title="">design-patterns</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/General" rel="0" title="">General</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/asp.net-mvc3" rel="6" title="6 posts">asp.net-mvc3</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/asp.net-mvc4" rel="3" title="3 posts">asp.net-mvc4</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/XRouter" rel="1" title="1 post">XRouter</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/bootstrap" rel="2" title="2 posts">bootstrap</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/html5" rel="0" title="">html5</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/css3" rel="0" title="">css3</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/template" rel="2" title="2 posts">template</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/cartoon" rel="2" title="2 posts">cartoon</a></li>
			  <li><a href="http://www.prideparrot.com/blog/tag/presentation" rel="1" title="1 post">presentation</a></li>
		  </ul>
		</div>
	  </div>
	</div>
  </div>
  <div class="site-info">Copyright © 2014 PrideParrot. All rights reserved.</div>
</footer>

<script src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/disqus.js" type="text/javascript"></script>
<script type="text/javascript" src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/addthis_widget.js"></script><div id="_atssh" style="visibility: hidden; height: 1px; width: 1px; position: absolute; z-index: 100000;"><iframe id="_atssh566" title="AddThis utility frame" src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/sh174.htm" style="height: 1px; width: 1px; position: absolute; z-index: 100000; border: 0px; left: 0px; top: 0px;"></iframe></div><script type="text/javascript" src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/core157.js"></script>
	</div>

  </div>

  <script src="/Images/How to create a simple blog using ASP.NET MVC - Part I_files/js" type="text/javascript"></script>

  <script type="text/javascript">
	  var _gaq = _gaq || [];
	  _gaq.push(['_setAccount', 'UA-25231669-1']);
	  _gaq.push(['_trackPageview']);

	  (function () {
		  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	  })();
  </script>



</body></html>